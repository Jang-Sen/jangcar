var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/AccessTokenGuard.html",[0,0.486,1,2.327]],["body/injectables/AccessTokenGuard.html",[0,0.826,1,3.952,2,1.606,3,0.244,4,0.213,5,0.213,6,4.38,7,1.949,8,6.199,9,0.414,10,0.019,11,0.814,12,3.256,13,2.204,14,0.244,15,0.062,16,0.016,17,0.016]],["title/injectables/AccessTokenStrategy.html",[0,0.486,18,2.327]],["body/injectables/AccessTokenStrategy.html",[0,0.643,2,1.094,3,0.166,4,0.145,5,0.145,7,1.518,9,0.435,10,0.02,11,0.555,13,1.502,14,0.166,15,0.042,16,0.013,17,0.013,18,3.077,19,2.983,20,4.828,21,0.62,22,1.681,23,2.034,24,3.077,25,2.206,26,2.412,27,3.359,28,2.881,29,1.121,30,3.479,31,1.868,32,1.868,33,1.011,34,1.518,35,4.828,36,3.817,37,3.479,38,2.983,39,1.212,40,1.687,41,2.218,42,3.479,43,2.218,44,2.055,45,2.983,46,1.421,47,1.917,48,2.983,49,2.341,50,1.868,51,2.218,52,3.479,53,3.479,54,3.479,55,3.479,56,1.917,57,1.276,58,3.479,59,3.479]],["title/controllers/AppController.html",[60,1.576,61,2.532]],["body/controllers/AppController.html",[3,0.221,4,0.193,5,0.193,9,0.389,10,0.019,11,0.736,14,0.221,15,0.056,16,0.015,17,0.015,21,0.823,22,2.028,29,1.071,39,1.607,50,1.785,57,1.693,60,2.513,61,4.037,62,1.992,63,3.957,64,5.743,65,1.884,66,4.615,67,1.74,68,3.768,69,3.957,70,2.542,71,4.615]],["title/modules/AppModule.html",[72,1.148,73,2.532]],["body/modules/AppModule.html",[3,0.126,4,0.11,5,0.11,9,0.452,10,0.019,11,0.419,14,0.126,15,0.032,16,0.01,17,0.01,46,1.074,61,3.282,62,1.703,68,3.495,69,2.256,72,1.488,73,4.971,74,1.136,75,1.276,76,1.449,77,1.449,78,1.276,79,2.608,80,1.449,81,2.256,82,2.256,83,2.256,84,3.771,85,3.771,86,3.771,87,3.495,88,3.771,89,3.771,90,3.495,91,2.173,92,1.449,93,1.357,94,2.631,95,2.036,96,1.677,97,2.631,98,2.256,99,2.631,100,2.631,101,2.631,102,2.256,103,2.631,104,2.256,105,2.631,106,2.631,107,2.631,108,2.631,109,2.631,110,2.631,111,7.134,112,2.631,113,2.631,114,2.631,115,2.631,116,4.734,117,2.631,118,2.631,119,2.631,120,2.631,121,2.631,122,2.631,123,2.631,124,2.631,125,2.631,126,2.631,127,2.631,128,2.631,129,2.631,130,2.631,131,2.631,132,2.631,133,2.631]],["title/injectables/AppService.html",[0,0.486,68,2.157]],["body/injectables/AppService.html",[0,0.799,2,1.521,3,0.231,4,0.202,5,0.202,9,0.323,10,0.019,11,0.771,14,0.231,15,0.058,16,0.016,17,0.016,21,0.863,22,2.088,29,1.123,39,1.685,57,1.775,64,5.84,67,1.792,68,3.542,134,4.147,135,4.837,136,4.837,137,4.837,138,2.665]],["title/classes/Auth.html",[15,0.044,139,2.327]],["body/classes/Auth.html",[3,0.264,4,0.231,5,0.231,10,0.018,14,0.264,15,0.067,16,0.017,17,0.017,139,4.143,140,2.258,141,4.742]],["title/controllers/AuthController.html",[60,1.576,142,2.532]],["body/controllers/AuthController.html",[1,1.036,3,0.078,4,0.068,5,0.068,9,0.39,10,0.02,11,0.259,14,0.078,15,0.02,16,0.007,17,0.007,21,0.29,22,0.939,23,2.532,29,1.282,31,1.858,32,1.858,33,1.114,34,1.51,39,1.923,40,2.677,50,0.629,57,2.026,60,0.702,62,0.702,65,2.255,70,0.895,139,1.036,142,1.869,143,1.394,144,1.127,145,2.695,146,2.695,147,4.017,148,2.695,149,4.017,150,2.311,151,2.695,152,4.017,153,2.311,154,1.625,155,4.051,156,1.625,157,1.625,158,5.007,159,1.625,160,1.625,161,1.625,162,1.625,163,1.625,164,1.625,165,1.625,166,1.625,167,1.625,168,1.625,169,1.625,170,1.625,171,2.201,172,1.625,173,1.625,174,1.625,175,1.625,176,1.625,177,1.625,178,1.394,179,2.645,180,1.625,181,1.625,182,1.485,183,1.241,184,1.036,185,1.241,186,1.394,187,2.311,188,2.96,189,1.241,190,0.788,191,1.902,192,1.241,193,1.241,194,1.869,195,1.127,196,1.625,197,4.017,198,1.394,199,1.394,200,1.394,201,1.127,202,1.625,203,1.127,204,1.625,205,1.127,206,1.625,207,1.625,208,1.625,209,4.216,210,1.625,211,1.625,212,2.677,213,1.983,214,1.101,215,1.625,216,1.625,217,1.625,218,1.625,219,1.625,220,4.454,221,4.564,222,4.017,223,1.394,224,1.625,225,1.625,226,2.695,227,3.453,228,1.625,229,1.625,230,1.625,231,2.695,232,1.625,233,1.625,234,1.625,235,2.695,236,1.625,237,1.625]],["title/modules/AuthModule.html",[72,1.148,84,2.327]],["body/modules/AuthModule.html",[3,0.141,4,0.123,5,0.123,9,0.463,10,0.02,11,0.471,14,0.141,15,0.036,16,0.011,17,0.011,18,3.933,46,1.207,62,1.856,72,1.594,74,1.276,75,1.434,76,1.629,77,1.629,78,1.434,79,2.792,80,1.629,84,4.639,87,3.645,90,3.645,91,2.369,92,1.629,93,1.525,95,2.219,96,2.741,102,2.535,104,2.535,142,3.514,191,3.399,192,2.257,238,2.535,239,2.535,240,2.956,241,3.933,242,3.933,243,3.933,244,3.933,245,2.956,246,2.956,247,2.257,248,2.956,249,2.956,250,5.565,251,2.956,252,2.956,253,2.956,254,2.956,255,2.956]],["title/injectables/AuthService.html",[0,0.486,191,2.011]],["body/injectables/AuthService.html",[0,0.457,2,0.688,3,0.105,4,0.091,5,0.091,9,0.418,10,0.02,11,0.349,14,0.105,15,0.026,16,0.009,17,0.009,21,0.39,22,1.194,23,2.244,25,1.566,26,1.518,27,2.837,28,2.481,29,1.204,31,2.006,32,2.006,33,1.086,34,1.631,36,2.184,38,1.877,39,1.664,40,1.662,46,0.894,47,1.206,48,1.877,49,2.316,50,1.848,57,1.549,67,1.644,150,2.938,153,2.938,171,3.045,178,2.938,179,2.632,182,2.326,184,1.395,191,1.888,193,1.672,194,2.376,200,1.877,212,2.048,213,1.194,214,1.951,221,1.877,247,1.672,256,1.877,257,2.691,258,3.427,259,3.427,260,3.396,261,5.748,262,2.189,263,3.427,264,2.189,265,2.938,266,3.427,267,2.189,268,2.189,269,3.427,270,2.189,271,1.662,272,2.376,273,2.616,274,1.877,275,1.399,276,0.945,277,1.672,278,1.672,279,1.672,280,2.189,281,3.427,282,2.189,283,2.189,284,1.206,285,1.129,286,2.189,287,2.189,288,2.189,289,2.189,290,2.189,291,2.189,292,2.189,293,2.189,294,2.189,295,2.189,296,2.189]],["title/classes/Base.html",[15,0.044,297,2.327]],["body/classes/Base.html",[3,0.186,4,0.162,5,0.162,9,0.259,10,0.019,14,0.186,15,0.047,16,0.014,17,0.014,21,0.692,29,1.455,33,1.313,56,3.233,65,2.56,67,1.555,140,1.585,257,4.628,297,3.317,298,3.329,299,2.013,300,5.868,301,5.868,302,5.868,303,6.728,304,5.868,305,3.883,306,5.868,307,3.883,308,4.461,309,3.883,310,5.868,311,3.883,312,3.329,313,2.003,314,3.883]],["title/entities/Car.html",[138,2.011,315,2.011]],["body/entities/Car.html",[3,0.182,4,0.159,5,0.159,7,1.198,9,0.343,10,0.019,14,0.182,15,0.046,16,0.013,17,0.013,21,0.679,29,1.444,33,1.302,65,2.54,67,2,138,2.83,257,4.614,297,3.274,299,1.987,313,1.965,315,2.83,316,2.428,317,3.266,318,4.983,319,4.983,320,4.983,321,4.983,322,5.38,323,3.809,324,3.809,325,3.809,326,3.562,327,3.809,328,3.266]],["title/controllers/CarController.html",[60,1.576,329,2.532]],["body/controllers/CarController.html",[3,0.118,4,0.103,5,0.103,9,0.366,10,0.02,11,0.393,14,0.118,15,0.03,16,0.01,17,0.01,21,0.439,22,1.307,23,2.523,29,1.271,31,1.967,32,1.967,33,1.208,34,1.599,39,1.907,40,2.655,50,0.953,56,3.177,57,2.009,60,1.063,62,1.063,65,2.235,67,1.894,70,1.357,138,1.357,144,1.708,182,3.177,183,2.866,185,1.881,188,3.899,189,1.881,190,1.194,209,4.18,214,2.235,329,2.603,330,2.112,331,1.82,332,3.899,333,4.361,334,3.218,335,2.603,336,1.881,337,3.653,338,2.463,339,2.463,340,2.112,341,3.753,342,2.463,343,3.753,344,2.463,345,2.112,346,3.753,347,2.463,348,2.112,349,3.242,350,2.463,351,2.463,352,2.463,353,2.112,354,2.687,355,2.112,356,2.112,357,2.866,358,2.112,359,2.463,360,2.463,361,2.463,362,2.463,363,2.463,364,2.463,365,2.463,366,2.463,367,2.463,368,2.463,369,2.463,370,2.463,371,2.463]],["title/modules/CarModule.html",[72,1.148,85,2.327]],["body/modules/CarModule.html",[3,0.2,4,0.175,5,0.175,9,0.448,10,0.019,11,0.668,14,0.2,15,0.051,16,0.014,17,0.014,62,2.362,72,1.916,74,1.809,75,2.032,76,2.309,77,2.309,78,2.032,79,3.357,80,2.309,85,4.382,91,3.015,92,2.309,93,2.162,95,2.162,138,2.309,329,4.226,354,4.061,355,3.593,372,3.593,373,3.593,374,4.191,375,2.906,376,2.162,377,4.191,378,3.593,379,4.191]],["title/injectables/CarService.html",[0,0.486,354,2.157]],["body/injectables/CarService.html",[0,0.479,2,0.733,3,0.111,4,0.097,5,0.097,9,0.377,10,0.02,11,0.372,14,0.111,15,0.028,16,0.009,17,0.009,21,0.416,22,1.253,23,2.496,25,1.645,29,1.31,31,2.066,32,2.066,33,1.118,34,1.679,39,1.86,40,2.396,49,1.131,56,2.722,57,1.813,67,1.864,138,3.57,182,2.942,212,2.396,214,2.304,284,2.421,285,2.268,313,1.203,331,1.745,332,3.086,333,4.237,334,3.086,335,2.495,336,2.748,337,2.92,340,3.086,345,3.086,348,3.086,349,3.15,354,2.126,356,1.999,357,2.748,358,1.999,376,1.203,378,1.999,380,1.999,381,1.78,382,3.914,383,2.331,384,2.331,385,2.331,386,2.331,387,2.331,388,2.331,389,4.237,390,1.78,391,2.331,392,2.331,393,1.999,394,1.999,395,2.331,396,2.331,397,2.331]],["title/classes/CreateAuthDto.html",[15,0.044,398,2.532]],["body/classes/CreateAuthDto.html",[3,0.263,4,0.229,5,0.229,10,0.018,14,0.263,15,0.066,16,0.017,17,0.017,140,2.246,398,4.493,399,4.716,400,4.199]],["title/classes/CreateCarDto.html",[15,0.044,337,2.157]],["body/classes/CreateCarDto.html",[3,0.177,4,0.155,5,0.155,9,0.337,10,0.019,14,0.177,15,0.061,16,0.013,17,0.013,21,0.662,29,1.429,33,1.288,65,2.513,67,1.985,140,1.515,190,1.799,299,1.952,318,4.917,319,4.917,320,4.917,321,4.917,326,3.499,337,2.981,401,5.519,402,2.833,403,3.71,404,3.71,405,4.917,406,3.71,407,3.71,408,5.519,409,3.71,410,3.71,411,3.71,412,4.463,413,4.327,414,2.365,415,3.655,416,3.71,417,3.71]],["title/classes/CreateTermDto.html",[15,0.044,418,2.011]],["body/classes/CreateTermDto.html",[3,0.162,4,0.141,5,0.141,9,0.317,10,0.019,14,0.162,15,0.057,16,0.012,17,0.012,21,0.604,29,1.446,33,1.304,34,1.861,65,2.543,140,1.382,190,1.641,299,1.832,412,4.476,414,2.158,415,3.97,418,2.609,419,5.534,420,2.585,421,4.685,422,4.685,423,4.685,424,4.685,425,4.685,426,5.967,427,6.228,428,4.476,429,3.385,430,5.074,431,3.385,432,3.385,433,3.385,434,3.385,435,6.454]],["title/classes/CreateUserDto.html",[15,0.044,179,2.011]],["body/classes/CreateUserDto.html",[3,0.136,4,0.119,5,0.119,9,0.389,10,0.019,14,0.136,15,0.051,16,0.011,17,0.011,21,0.508,29,1.461,33,1.352,34,2.106,65,2.57,67,1.93,140,1.163,179,2.305,190,1.381,271,2.405,275,2.486,276,1.229,299,1.618,326,2.901,408,5.396,412,4.222,413,3.587,414,1.815,415,3.484,418,2.732,436,5.536,437,1.974,438,2.93,439,4.253,440,3.161,441,3.142,442,2.93,443,2.847,444,3.587,445,2.847,446,2.847,447,3.587,448,2.847,449,2.847,450,4.184,451,2.847,452,2.847,453,2.847,454,2.847,455,2.847,456,2.847,457,2.847,458,3.587,459,4.184,460,2.847,461,1.974,462,2.174,463,1.974,464,2.847,465,2.847]],["title/modules/DbModule.html",[72,1.148,86,2.327]],["body/modules/DbModule.html",[3,0.205,4,0.179,5,0.179,9,0.411,10,0.019,11,0.682,14,0.205,15,0.052,16,0.014,17,0.014,27,3.176,33,0.896,46,1.748,72,1.745,74,1.847,86,3.537,95,2.863,96,3.537,316,2.728,375,2.968,376,2.208,428,3.847,438,2.529,442,2.529,466,4.28,467,4.28,468,3.67,469,3.67,470,3.67,471,4.28,472,3.67,473,4.28,474,3.67,475,4.28,476,4.28,477,4.28,478,4.28,479,4.28,480,4.28,481,4.28,482,4.28,483,4.28]],["title/injectables/GoogleAuthGuard.html",[0,0.486,201,2.532]],["body/injectables/GoogleAuthGuard.html",[0,0.811,2,1.558,3,0.237,4,0.207,5,0.207,7,1.914,9,0.44,10,0.019,11,0.79,12,3.159,13,2.139,14,0.237,15,0.06,16,0.016,17,0.016,201,4.22,275,2.024,276,2.139,484,4.25,485,3.159,486,6.086]],["title/injectables/GoogleAuthStrategy.html",[0,0.486,241,2.327]],["body/injectables/GoogleAuthStrategy.html",[0,0.535,2,0.847,3,0.129,4,0.112,5,0.112,7,1.263,9,0.399,10,0.02,11,0.43,13,1.163,14,0.129,15,0.033,16,0.01,17,0.01,21,0.481,22,1.399,23,1.762,24,3.061,25,1.835,27,2.746,28,2.297,29,0.932,31,1.554,32,1.554,33,0.841,34,1.263,39,0.938,41,3.061,43,3.061,44,1.592,46,1.1,47,1.484,49,1.948,50,1.554,51,1.718,67,1.784,184,1.718,212,2.328,213,1.982,214,1.64,241,2.56,271,2.58,272,2.785,275,2.173,276,1.163,284,1.484,285,1.39,440,1.718,442,1.592,487,4.117,488,1.718,489,4.016,490,2.31,491,2.057,492,3.444,493,2.057,494,3.666,495,4.346,496,3.666,497,5.322,498,2.694,499,3.067,500,2.057,501,2.31,502,2.057,503,2.694,504,2.31,505,2.694,506,2.057,507,2.694,508,2.694,509,3.444,510,4.016,511,1.868,512,2.694,513,3.067,514,2.057,515,3.067,516,3.067,517,1.868,518,1.868,519,2.057,520,2.057,521,3.067,522,2.694]],["title/injectables/KakaoAuthGuard.html",[0,0.486,203,2.532]],["body/injectables/KakaoAuthGuard.html",[0,0.811,2,1.558,3,0.237,4,0.207,5,0.207,7,1.914,9,0.44,10,0.019,11,0.79,12,3.159,13,2.139,14,0.237,15,0.06,16,0.016,17,0.016,203,4.22,275,2.024,276,2.139,485,3.159,523,4.25,524,6.086]],["title/injectables/KakaoAuthStrategy.html",[0,0.486,242,2.327]],["body/injectables/KakaoAuthStrategy.html",[0,0.537,2,0.852,3,0.129,4,0.113,5,0.113,7,1.268,9,0.4,10,0.02,11,0.432,13,1.169,14,0.129,15,0.033,16,0.01,17,0.01,21,0.483,22,1.405,23,1.767,24,3.07,25,1.843,27,2.753,28,2.673,29,0.936,31,1.56,32,1.56,33,0.844,34,1.268,39,0.944,41,3.07,43,3.07,44,1.601,46,1.106,47,1.492,49,1.955,50,1.56,51,1.727,67,1.788,184,1.727,212,2.766,213,1.405,214,1.647,242,2.57,271,2.336,272,2.796,275,2.179,276,1.169,277,2.069,279,2.069,284,1.492,285,1.398,440,1.727,442,2.846,488,1.727,490,2.323,491,2.069,492,3.458,493,2.069,494,3.678,495,4.074,496,3.678,499,3.079,502,2.069,506,2.069,511,1.879,513,3.079,514,2.069,515,2.069,516,3.079,517,1.879,518,1.879,519,2.069,520,2.069,521,3.079,525,4.13,526,4.032,527,2.709,528,2.069,529,2.709,530,2.709,531,3.458,532,2.709,533,2.709]],["title/injectables/LocalAuthGuard.html",[0,0.486,195,2.532]],["body/injectables/LocalAuthGuard.html",[0,0.811,2,1.558,3,0.237,4,0.207,5,0.207,7,1.914,9,0.44,10,0.019,11,0.79,12,3.159,13,2.139,14,0.237,15,0.06,16,0.016,17,0.016,195,4.22,275,2.024,276,2.139,485,3.159,534,4.25,535,6.086]],["title/injectables/LocalAuthStrategy.html",[0,0.486,243,2.327]],["body/injectables/LocalAuthStrategy.html",[0,0.645,2,1.098,3,0.167,4,0.146,5,0.146,7,1.522,9,0.421,10,0.02,11,0.557,13,1.507,14,0.167,15,0.042,16,0.013,17,0.013,21,0.623,22,1.686,23,2.038,24,3.085,25,1.595,29,1.124,31,1.872,32,1.872,33,1.013,34,1.522,39,1.216,40,1.693,41,3.54,43,3.54,44,2.063,50,1.351,51,2.225,57,1.281,67,1.948,70,1.923,191,3.59,192,2.666,214,1.426,243,3.085,271,2.693,275,1.426,276,1.507,278,3.695,438,3.543,488,2.225,536,4.762,537,3.491,538,3.491,539,4.839,540,3.491,541,2.666,542,3.491,543,3.491]],["title/classes/LoginUserDto.html",[15,0.044,171,2.327]],["body/classes/LoginUserDto.html",[3,0.205,4,0.179,5,0.179,9,0.371,10,0.019,14,0.205,15,0.067,16,0.014,17,0.014,21,0.763,29,1.288,33,1.162,65,2.265,67,1.947,140,1.748,171,3.537,190,2.075,271,2.985,299,2.146,405,4.757,412,4.269,414,2.728,415,3.537,437,2.968,438,3.637,444,3.67,447,4.757,458,4.757,544,5.279,545,4.28,546,4.28,547,4.28]],["title/modules/MailModule.html",[72,1.148,87,2.157]],["body/modules/MailModule.html",[3,0.203,4,0.177,5,0.177,9,0.41,10,0.019,11,0.677,14,0.203,15,0.051,16,0.014,17,0.014,46,1.733,72,1.928,74,1.832,75,2.058,76,2.338,77,2.338,78,2.058,79,3.377,80,3.377,87,4.149,91,3.04,92,2.338,93,2.19,95,2.19,96,3.517,260,4.347,274,3.639,548,3.639,549,3.639,550,3.639,551,4.244]],["title/injectables/MailService.html",[0,0.486,260,2.157]],["body/injectables/MailService.html",[0,0.666,2,1.15,3,0.175,4,0.153,5,0.153,9,0.409,10,0.02,11,0.583,14,0.175,15,0.044,16,0.013,17,0.013,21,0.652,22,1.74,25,1.671,26,2.535,27,3.41,29,1.321,31,1.933,32,1.933,33,1.191,34,1.571,39,1.274,46,1.493,49,2.759,50,1.414,57,1.342,70,2.014,139,2.331,213,1.274,260,2.952,299,1.933,470,3.135,552,3.135,553,6.61,554,4.996,555,4.996,556,4.996,557,5.691,558,3.656,559,3.656,560,3.656,561,4.996,562,3.135,563,3.656,564,3.656,565,3.656,566,3.656,567,3.656,568,3.656]],["title/injectables/NaverAuthGuard.html",[0,0.486,205,2.532]],["body/injectables/NaverAuthGuard.html",[0,0.811,2,1.558,3,0.237,4,0.207,5,0.207,7,1.914,9,0.44,10,0.019,11,0.79,12,3.159,13,2.139,14,0.237,15,0.06,16,0.016,17,0.016,205,4.22,275,2.024,276,2.139,485,3.159,569,4.25,570,6.086]],["title/injectables/NaverAuthStrategy.html",[0,0.486,244,2.327]],["body/injectables/NaverAuthStrategy.html",[0,0.541,2,0.859,3,0.131,4,0.114,5,0.114,7,1.276,9,0.401,10,0.02,11,0.435,13,1.179,14,0.131,15,0.033,16,0.011,17,0.011,21,0.487,22,1.413,23,1.776,24,3.085,25,1.854,26,1.894,27,3.095,28,2.68,29,0.942,31,1.569,32,1.569,33,0.849,34,1.276,39,0.951,41,3.085,43,3.085,44,1.614,46,1.115,47,1.505,49,1.967,50,1.569,51,1.741,67,1.793,184,1.741,212,2.598,213,1.413,214,1.657,244,2.586,271,2.347,272,2.813,275,2.187,276,1.179,277,2.085,279,2.085,284,1.505,285,1.409,440,1.741,442,1.614,488,1.741,491,2.085,493,2.085,494,3.696,495,4.09,496,3.696,499,3.098,502,2.085,504,2.342,506,2.085,509,3.479,511,1.894,513,3.098,514,2.085,515,2.085,516,3.098,517,1.894,518,1.894,519,2.085,520,2.085,521,3.098,531,3.479,571,4.15,572,4.057,573,2.731,574,2.085,575,2.731,576,2.731,577,2.731,578,2.731]],["title/modules/RedisModule.html",[72,1.148,88,2.327]],["body/modules/RedisModule.html",[3,0.201,4,0.176,5,0.176,9,0.432,10,0.02,11,0.671,14,0.201,15,0.051,16,0.014,17,0.014,23,1.544,27,3.339,46,1.718,57,1.544,72,1.725,74,1.816,88,3.498,95,2.831,96,3.498,428,2.918,438,2.486,468,3.608,469,3.608,472,3.608,474,3.608,579,4.208,580,4.208,581,4.208,582,5.487,583,3.608,584,3.608,585,3.608,586,4.705,587,4.208,588,4.208,589,4.208,590,4.208,591,4.208,592,4.208,593,4.208]],["title/interfaces/RequestUserInterface.html",[155,2.327,594,2.327]],["body/interfaces/RequestUserInterface.html",[3,0.236,4,0.206,5,0.206,7,1.908,9,0.33,10,0.019,14,0.236,16,0.016,17,0.016,21,0.88,33,1.033,155,3.868,213,2.555,299,2.347,594,3.144,595,3.766,596,4.229,597,6.068,598,3.144]],["title/entities/Term.html",[315,2.011,441,1.884]],["body/entities/Term.html",[3,0.137,4,0.12,5,0.12,9,0.281,10,0.019,14,0.137,15,0.035,16,0.011,17,0.011,21,0.512,29,1.465,33,1.321,34,1.726,56,2.746,65,2.577,67,1.258,213,2.3,257,4.64,299,1.629,308,3.61,312,2.462,313,1.482,315,2.319,316,1.831,322,4.663,421,4.274,422,4.274,423,4.274,424,4.274,425,4.274,426,5.755,430,5.755,441,2.172,598,1.831,599,2.462,600,5.844,601,2.872,602,2.872,603,2.872,604,2.872,605,2.872,606,2.872,607,2.462,608,4.21,609,4.21,610,3.61,611,2.872,612,3.61,613,5.011]],["title/controllers/TermController.html",[60,1.576,614,2.532]],["body/controllers/TermController.html",[1,1.972,3,0.148,4,0.129,5,0.129,9,0.431,10,0.02,11,0.493,14,0.148,15,0.037,16,0.012,17,0.012,21,0.552,22,1.547,23,2.299,29,1.032,31,1.719,32,1.719,33,0.93,34,1.397,39,1.547,40,2.154,50,1.197,57,1.63,60,1.335,62,1.335,65,1.814,70,1.704,144,2.145,155,4.115,158,5.161,182,3.639,183,3.97,185,3.392,186,2.652,187,3.81,189,2.362,190,1.5,198,2.652,199,2.652,209,3.392,214,1.814,223,3.81,331,2.154,335,3.081,353,3.81,418,3.131,441,1.596,462,2.362,463,3.081,614,3.081,615,2.652,616,3.093,617,3.093,618,3.093,619,3.093,620,3.623,621,3.093,622,3.093,623,3.072,624,2.652,625,2.652,626,3.093,627,3.093,628,3.093,629,3.093,630,3.093,631,3.093]],["title/modules/TermModule.html",[72,1.148,89,2.327]],["body/modules/TermModule.html",[3,0.2,4,0.175,5,0.175,9,0.448,10,0.019,11,0.668,14,0.2,15,0.051,16,0.014,17,0.014,62,2.362,72,1.916,74,1.809,75,2.032,76,2.309,77,2.309,78,2.032,79,3.357,80,2.309,89,4.382,91,3.015,92,2.309,93,2.162,95,2.162,375,2.906,376,2.162,441,2.162,461,2.906,614,4.226,623,4.061,624,3.593,632,3.593,633,3.593,634,4.191,635,4.191,636,4.191]],["title/injectables/TermService.html",[0,0.486,623,2.157]],["body/injectables/TermService.html",[0,0.577,2,0.938,3,0.143,4,0.124,5,0.124,9,0.427,10,0.02,11,0.475,14,0.143,15,0.036,16,0.011,17,0.011,21,0.532,22,1.507,23,2.271,25,1.978,29,1.183,31,1.971,32,1.971,33,1.067,34,1.602,39,1.507,40,2.099,49,1.446,50,1.154,56,1.643,57,1.588,182,3.603,212,2.099,213,2.358,214,1.767,284,1.643,285,1.539,313,1.539,331,2.099,335,3.001,376,1.539,381,2.278,382,4.292,390,2.278,418,3.078,441,2.628,461,2.068,462,2.278,463,3.001,598,1.901,620,3.562,623,2.557,625,2.558,637,2.558,638,2.983,639,4.328,640,2.983,641,4.328,642,2.983,643,2.983,644,2.983,645,2.983,646,2.983,647,4.328,648,2.983,649,2.983,650,2.983,651,2.983]],["title/interfaces/TokenPayloadInterface.html",[36,2.327,594,2.327]],["body/interfaces/TokenPayloadInterface.html",[3,0.247,4,0.215,5,0.215,10,0.019,14,0.247,16,0.016,17,0.016,21,0.92,33,1.08,36,3.976,67,2.004,265,5.972,299,2.413,594,3.289,595,3.94,652,4.425]],["title/classes/UpdateAuthDto.html",[15,0.044,653,2.788]],["body/classes/UpdateAuthDto.html",[3,0.242,4,0.211,5,0.211,7,1.937,9,0.412,10,0.019,14,0.242,15,0.061,16,0.016,17,0.016,140,2.065,331,2.452,398,3.506,400,3.861,653,4.704,654,4.336,655,6.161,656,3.506,657,3.506,658,3.506,659,5.056]],["title/classes/UpdateCarDto.html",[15,0.044,349,2.327]],["body/classes/UpdateCarDto.html",[3,0.242,4,0.211,5,0.211,7,1.937,9,0.412,10,0.019,14,0.242,15,0.061,16,0.016,17,0.016,140,2.065,331,2.452,337,2.987,349,3.927,357,3.861,402,3.861,656,3.506,657,3.506,658,3.506,660,4.336,661,6.161]],["title/classes/UpdateTermDto.html",[15,0.044,620,2.327]],["body/classes/UpdateTermDto.html",[3,0.243,4,0.212,5,0.212,7,1.943,9,0.413,10,0.019,14,0.243,15,0.061,16,0.016,17,0.016,140,2.075,190,2.464,331,2.464,418,2.799,420,3.88,463,3.524,620,3.939,656,3.524,662,4.357,663,6.18]],["title/classes/UpdateUserDto.html",[15,0.044,664,2.788]],["body/classes/UpdateUserDto.html",[3,0.242,4,0.211,5,0.211,7,1.937,9,0.412,10,0.019,14,0.242,15,0.061,16,0.016,17,0.016,140,2.065,179,2.785,194,3.506,331,2.452,437,3.506,656,3.506,657,3.506,658,3.506,664,4.704,665,4.336,666,6.161]],["title/entities/User.html",[213,1.272,315,2.011]],["body/entities/User.html",[3,0.109,4,0.095,5,0.095,7,0.715,9,0.39,10,0.02,14,0.109,15,0.043,16,0.009,17,0.009,21,0.405,23,0.834,29,1.353,33,1.262,34,1.756,57,0.834,65,2.38,67,1.801,212,1.102,213,1.229,214,1.441,257,4.497,271,2.098,273,2.695,275,2.46,276,0.981,278,2.695,297,2.25,299,1.365,313,1.173,315,1.944,316,1.449,322,4.601,326,2.447,328,1.949,428,4.385,438,2.556,439,3.709,440,2.757,441,3.007,442,2.556,461,1.576,511,1.576,517,1.576,518,1.576,607,1.949,610,3.026,612,3.026,613,3.026,667,1.949,668,2.273,669,2.273,670,4.326,671,2.273,672,2.273,673,2.273,674,2.273,675,2.273,676,4.876,677,2.273,678,2.273,679,3.529,680,2.273,681,2.273,682,2.273,683,3.529,684,3.529,685,3.026,686,3.529,687,1.949,688,4.326,689,2.273,690,2.273,691,2.273,692,3.529,693,2.273,694,2.273,695,2.273,696,2.273,697,2.273,698,2.273,699,2.273,700,2.273,701,1.949,702,2.273,703,2.273,704,2.273,705,2.273,706,2.273]],["title/controllers/UserController.html",[60,1.576,707,2.532]],["body/controllers/UserController.html",[3,0.239,4,0.209,5,0.209,9,0.409,10,0.019,11,0.798,14,0.239,15,0.06,16,0.016,17,0.016,28,2.855,47,2.758,50,1.937,60,2.161,62,2.161,70,2.758,144,3.471,213,1.744,707,4.246,708,4.292,709,5.006]],["title/modules/UserModule.html",[72,1.148,90,2.157]],["body/modules/UserModule.html",[3,0.191,4,0.167,5,0.167,9,0.441,10,0.019,11,0.639,14,0.191,15,0.048,16,0.014,17,0.014,28,3.149,47,2.207,62,2.293,72,1.874,74,1.729,75,1.943,76,2.207,77,2.207,78,1.943,79,3.284,80,3.284,90,4.092,91,2.927,92,2.207,93,2.067,95,2.067,213,1.396,375,2.778,376,2.067,598,2.554,707,4.134,710,3.436,711,3.436,712,3.436,713,4.007,714,4.007,715,4.007]],["title/injectables/UserService.html",[0,0.486,28,1.576]],["body/injectables/UserService.html",[0,0.589,2,0.967,3,0.147,4,0.128,5,0.128,9,0.401,10,0.02,11,0.49,14,0.147,15,0.037,16,0.011,17,0.011,21,0.548,22,1.541,23,2.294,25,2.021,28,1.909,29,1.203,31,2.004,32,2.004,33,1.085,34,1.629,39,1.541,40,2.145,49,1.491,56,3.122,57,1.623,67,1.549,179,3.122,182,1.693,193,2.347,194,2.132,212,2.145,213,2.178,214,1.806,271,2.748,284,1.693,285,1.586,313,1.586,331,2.145,336,3.378,376,1.586,381,2.347,382,4.336,389,3.793,390,2.347,393,2.636,394,2.636,598,1.96,716,2.636,717,4.423,718,3.074,719,3.074,720,4.423,721,4.859,722,3.074,723,4.423,724,3.074,725,3.074]],["title/coverage.html",[726,3.811]],["body/coverage.html",[0,0.916,1,1.504,5,0.098,6,2.023,10,0.019,15,0.079,16,0.009,17,0.009,18,1.504,19,2.023,28,1.018,33,0.494,36,1.504,60,2.317,61,1.636,63,2.023,68,1.394,78,1.144,134,2.023,138,1.299,139,1.504,141,2.023,142,1.636,143,2.023,155,1.504,171,1.504,179,1.299,191,1.299,195,1.636,201,1.636,203,1.636,205,1.636,213,0.822,241,1.504,242,1.504,243,1.504,244,1.504,256,2.023,260,1.394,285,1.217,297,1.504,298,2.023,315,2.439,317,2.023,329,1.636,330,2.023,337,1.394,349,1.504,354,1.394,380,2.023,398,1.636,399,2.023,400,2.773,401,2.023,402,2.773,418,1.299,419,2.023,420,2.773,436,2.023,437,3.07,441,1.217,484,2.023,485,3.169,487,2.023,488,3.169,523,2.023,525,2.023,534,2.023,536,2.023,544,2.023,552,2.023,569,2.023,571,2.023,594,2.315,596,2.023,599,2.023,614,1.636,615,2.023,620,1.504,623,1.394,637,2.023,652,2.023,653,1.801,654,2.023,660,2.023,662,2.023,664,1.801,665,2.023,667,2.023,707,1.636,708,2.023,716,2.023,726,1.801,727,2.023,728,2.359,729,2.359,730,7.426,731,4.972,732,2.359,733,4.427,734,6.877,735,5.907,736,2.359,737,3.631,738,4.427,739,2.023,740,2.359,741,2.359,742,2.359,743,2.359]],["title/dependencies.html",[75,2.13,744,2.611]],["body/dependencies.html",[10,0.02,11,0.54,13,1.461,15,0.057,16,0.012,17,0.012,44,3.813,45,4.061,46,1.382,75,1.641,98,2.903,190,1.641,247,2.585,273,2.585,313,1.747,376,1.747,414,2.158,500,2.585,501,2.903,528,2.585,541,3.617,562,2.903,574,2.585,583,4.061,584,4.061,585,2.903,586,2.903,657,2.347,658,2.347,685,2.903,687,2.903,701,2.903,745,3.385,746,5.464,747,3.385,748,3.385,749,3.385,750,3.385,751,3.385,752,3.385,753,3.385,754,3.385,755,3.385,756,3.385,757,3.385,758,4.737,759,4.737,760,3.385,761,3.385,762,3.385,763,3.385,764,3.385,765,3.385,766,4.737,767,4.737,768,3.385,769,3.385,770,3.385,771,3.385,772,3.385,773,3.385,774,3.385,775,3.385,776,3.385,777,3.385,778,4.737,779,3.385,780,3.385,781,3.385,782,3.385,783,3.385,784,3.385,785,3.385,786,3.385,787,3.385]],["title/miscellaneous/enumerations.html",[788,2.111,789,3.767]],["body/miscellaneous/enumerations.html",[10,0.019,16,0.016,17,0.016,21,0.92,275,2.547,500,4.763,528,4.763,541,4.763,574,4.763,721,5.972,788,3.578,789,4.425,790,5.16,791,5.16]],["title/miscellaneous/functions.html",[788,2.111,792,3.767]],["body/miscellaneous/functions.html",[10,0.017,16,0.017,17,0.017,21,0.997,78,3.363,739,4.794,788,3.877,792,4.794,793,5.591]],["title/index.html",[21,0.543,794,3.045,795,3.045]],["body/index.html",[4,0.124,10,0.018,16,0.011,17,0.011,93,2.875,382,2.056,415,3.236,726,2.264,727,2.542,796,2.965,797,2.965,798,5.077,799,2.965,800,2.965,801,2.965,802,2.965,803,2.965,804,2.965,805,2.542,806,5.077,807,2.965,808,2.965,809,5.573,810,2.965,811,6.373,812,2.965,813,6.373,814,2.965,815,2.965,816,2.965,817,4.309,818,2.965,819,2.965,820,2.965,821,5.077,822,2.965,823,4.309,824,2.965,825,2.965,826,2.965,827,5.573,828,2.965,829,2.965,830,2.965,831,2.965,832,2.965,833,5.573,834,4.309,835,2.965,836,5.077,837,2.965,838,4.778,839,4.309,840,2.965,841,2.965,842,2.965,843,2.965,844,2.965,845,2.965,846,5.077,847,2.965,848,2.965,849,2.965,850,4.309,851,2.542,852,2.965,853,2.965,854,5.077,855,2.965,856,2.965,857,2.965,858,2.965,859,2.965,860,2.965,861,2.965,862,4.309,863,2.965,864,2.965,865,2.965,866,2.965,867,2.965,868,2.965,869,4.309,870,2.965,871,2.965,872,2.965,873,4.309,874,4.309,875,2.965,876,2.965,877,2.965,878,2.965,879,2.965,880,2.965,881,2.965,882,2.965,883,2.965,884,2.965,885,2.965,886,2.542,887,2.965,888,2.965,889,2.965,890,2.965,891,2.965,892,2.965,893,2.542]],["title/modules.html",[74,2.154]],["body/modules.html",[10,0.015,16,0.015,17,0.015,73,3.306,74,2.058,84,3.039,85,3.039,86,3.039,87,2.817,88,3.039,89,3.039,90,2.817,838,6.096,851,5.095,894,7.109,895,7.109,896,7.288,897,5.942]],["title/overview.html",[898,4.279]],["body/overview.html",[2,0.927,10,0.019,16,0.011,17,0.011,18,3.225,28,2.746,62,1.272,68,2.989,72,0.927,73,5.002,74,1.272,75,1.429,76,1.624,77,1.624,78,1.429,79,1.624,80,1.624,81,2.528,82,2.528,83,2.528,84,4.618,85,3.765,86,3.225,87,3.759,88,3.225,89,3.765,90,3.759,91,2.364,92,1.624,93,1.521,140,1.204,191,2.787,238,2.528,239,2.528,241,3.225,242,3.225,243,3.225,244,3.225,260,3.759,316,1.879,354,2.989,372,2.528,373,2.528,548,2.528,549,2.528,550,2.528,595,2.251,623,2.989,632,2.528,633,2.528,710,2.528,711,2.528,712,2.528,898,2.528,899,2.948,900,2.948,901,2.948,902,2.948,903,2.948,904,2.948]],["title/properties.html",[299,1.699,744,2.611]],["body/properties.html",[10,0.019,16,0.017,17,0.017,299,2.128,805,4.716,886,4.716,893,4.716,905,5.5,906,5.5,907,5.5]]],"invertedIndex":[["",{"_index":10,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":730,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":906,"title":{},"body":{"properties.html":{}}}],["0.14.1",{"_index":773,"title":{},"body":{"dependencies.html":{}}}],["0.2.0",{"_index":778,"title":{},"body":{"dependencies.html":{}}}],["0.3.20",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":772,"title":{},"body":{"dependencies.html":{}}}],["0.7.0",{"_index":777,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":734,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":732,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":731,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":735,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":738,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":737,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":733,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":736,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":741,"title":{},"body":{"coverage.html":{}}}],["1.0.0",{"_index":780,"title":{},"body":{"dependencies.html":{}}}],["1.0.1",{"_index":779,"title":{},"body":{"dependencies.html":{}}}],["1.0.38",{"_index":768,"title":{},"body":{"dependencies.html":{}}}],["1.0.6",{"_index":781,"title":{},"body":{"dependencies.html":{}}}],["1.4.7",{"_index":759,"title":{},"body":{"dependencies.html":{}}}],["1.8.2",{"_index":775,"title":{},"body":{"dependencies.html":{}}}],["1.8.6",{"_index":761,"title":{},"body":{"dependencies.html":{}}}],["10.0.0",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["10.0.2",{"_index":754,"title":{},"body":{"dependencies.html":{}}}],["10.0.3",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["10.2.0",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["100",{"_index":417,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["100})@isnumber",{"_index":410,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["1012345678",{"_index":450,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["11",{"_index":903,"title":{},"body":{"overview.html":{}}}],["123456a",{"_index":447,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["16",{"_index":902,"title":{},"body":{"overview.html":{}}}],["17.1.1",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["17.1.14",{"_index":763,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":904,"title":{},"body":{"overview.html":{}}}],["2.0.0",{"_index":771,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":699,"title":{},"body":{"entities/User.html":{}}}],["3",{"_index":901,"title":{},"body":{"overview.html":{}}}],["3.2.3",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":767,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":770,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":520,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["5",{"_index":900,"title":{},"body":{"overview.html":{}}}],["5.0.2",{"_index":756,"title":{},"body":{"dependencies.html":{}}}],["5.1.1",{"_index":769,"title":{},"body":{"dependencies.html":{}}}],["6.4.16",{"_index":765,"title":{},"body":{"dependencies.html":{}}}],["6.9.15",{"_index":776,"title":{},"body":{"dependencies.html":{}}}],["7.4.2",{"_index":753,"title":{},"body":{"dependencies.html":{}}}],["7.8.1",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":899,"title":{},"body":{"overview.html":{}}}],["8.13.0",{"_index":782,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":480,"title":{},"body":{"modules/DbModule.html":{}}}],["abstract",{"_index":314,"title":{},"body":{"classes/Base.html":{}}}],["access",{"_index":291,"title":{},"body":{"injectables/AuthService.html":{}}}],["access_token_secret",{"_index":120,"title":{},"body":{"modules/AppModule.html":{}}}],["access_token_time",{"_index":121,"title":{},"body":{"modules/AppModule.html":{}}}],["accesstoken",{"_index":499,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["accesstokenguard",{"_index":1,"title":{"injectables/AccessTokenGuard.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"controllers/AuthController.html":{},"controllers/TermController.html":{},"coverage.html":{}}}],["accesstokenstrategy",{"_index":18,"title":{"injectables/AccessTokenStrategy.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AuthModule.html":{},"coverage.html":{},"overview.html":{}}}],["agreefourteen",{"_index":421,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["agreeofevent",{"_index":422,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["agreeoflocation",{"_index":423,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["agreeofservice",{"_index":424,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["agreeofterm",{"_index":425,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["amazing",{"_index":879,"title":{},"body":{"index.html":{}}}],["api",{"_index":209,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{}}}],["apibearerauth",{"_index":187,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["apibody",{"_index":188,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{}}}],["apiproperty",{"_index":412,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["apiproperty()@isstring",{"_index":403,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["apiproperty({example",{"_index":405,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/LoginUserDto.html":{}}}],["apiproperty({type",{"_index":454,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["apitags",{"_index":189,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{}}}],["apitags('auth",{"_index":207,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('car",{"_index":359,"title":{},"body":{"controllers/CarController.html":{}}}],["apitags('term",{"_index":626,"title":{},"body":{"controllers/TermController.html":{}}}],["appcontroller",{"_index":61,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":850,"title":{},"body":{"index.html":{}}}],["applications",{"_index":804,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":73,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":68,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["async",{"_index":23,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":139,"title":{"classes/Auth.html":{}},"body":{"classes/Auth.html":{},"controllers/AuthController.html":{},"injectables/MailService.html":{},"coverage.html":{}}}],["auth.dto",{"_index":659,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["auth.dto.ts",{"_index":400,"title":{},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["auth.guard",{"_index":197,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":485,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["auth.strategy",{"_index":250,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.strategy.ts",{"_index":488,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["auth.strategy.ts:11",{"_index":538,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:12",{"_index":491,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:19",{"_index":540,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["auth.strategy.ts:23",{"_index":527,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["auth.strategy.ts:24",{"_index":573,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["auth.strategy.ts:25",{"_index":498,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["auth/auth.controller",{"_index":248,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":103,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":192,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{}}}],["auth/guard/accesstoken.guard",{"_index":199,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["auth/guard/google",{"_index":202,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guard/kakao",{"_index":204,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guard/local",{"_index":196,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/guard/naver",{"_index":206,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth/interface/requestuser.interface",{"_index":198,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["auth/interface/tokenpayload.interface",{"_index":48,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["auth/strategy/accesstoken.strategy",{"_index":251,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategy/google",{"_index":252,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategy/kakao",{"_index":253,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategy/local",{"_index":249,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/strategy/naver",{"_index":254,"title":{},"body":{"modules/AuthModule.html":{}}}],["authcontroller",{"_index":142,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenticate",{"_index":145,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(@req",{"_index":224,"title":{},"body":{"controllers/AuthController.html":{}}}],["authenticate(req",{"_index":154,"title":{},"body":{"controllers/AuthController.html":{}}}],["authguard",{"_index":12,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"injectables/NaverAuthGuard.html":{}}}],["authguard('jwt",{"_index":8,"title":{},"body":{"injectables/AccessTokenGuard.html":{}}}],["authguard(provider.google",{"_index":486,"title":{},"body":{"injectables/GoogleAuthGuard.html":{}}}],["authguard(provider.kakao",{"_index":524,"title":{},"body":{"injectables/KakaoAuthGuard.html":{}}}],["authguard(provider.local",{"_index":535,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authguard(provider.naver",{"_index":570,"title":{},"body":{"injectables/NaverAuthGuard.html":{}}}],["authmodule",{"_index":84,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":886,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":191,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":482,"title":{},"body":{"modules/DbModule.html":{}}}],["available",{"_index":897,"title":{},"body":{"modules.html":{}}}],["await",{"_index":214,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":880,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":643,"title":{},"body":{"injectables/TermService.html":{}}}],["badrequestexception('error",{"_index":651,"title":{},"body":{"injectables/TermService.html":{}}}],["base",{"_index":297,"title":{"classes/Base.html":{}},"body":{"classes/Base.html":{},"entities/Car.html":{},"entities/User.html":{},"coverage.html":{}}}],["bcrypt",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{},"entities/User.html":{},"dependencies.html":{}}}],["bcrypt.compare(dto.password",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt(10",{"_index":693,"title":{},"body":{"entities/User.html":{}}}],["bcrypt.hash(this.password",{"_index":695,"title":{},"body":{"entities/User.html":{}}}],["beforeinsert",{"_index":683,"title":{},"body":{"entities/User.html":{}}}],["beforesave",{"_index":690,"title":{},"body":{"entities/User.html":{}}}],["board",{"_index":872,"title":{},"body":{"index.html":{}}}],["body",{"_index":183,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{}}}],["boolean",{"_index":426,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["bootstrap",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":896,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":894,"title":{},"body":{"modules.html":{}}}],["building",{"_index":799,"title":{},"body":{"index.html":{}}}],["cache",{"_index":583,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["cachemodule",{"_index":580,"title":{},"body":{"modules/RedisModule.html":{}}}],["cachemodule.registerasync",{"_index":587,"title":{},"body":{"modules/RedisModule.html":{}}}],["callbackurl",{"_index":506,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["car",{"_index":138,"title":{"entities/Car.html":{}},"body":{"injectables/AppService.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"coverage.html":{}}}],["car.dto",{"_index":357,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/UpdateCarDto.html":{}}}],["car.dto.ts",{"_index":402,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/UpdateCarDto.html":{},"coverage.html":{}}}],["car.dto.ts:11",{"_index":411,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["car.dto.ts:15",{"_index":409,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["car.dto.ts:19",{"_index":404,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["car.dto.ts:7",{"_index":407,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["car/car.controller",{"_index":377,"title":{},"body":{"modules/CarModule.html":{}}}],["car/car.module",{"_index":101,"title":{},"body":{"modules/AppModule.html":{}}}],["car/car.service",{"_index":355,"title":{},"body":{"controllers/CarController.html":{},"modules/CarModule.html":{}}}],["car/dto/create",{"_index":356,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["car/dto/update",{"_index":358,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["car/entities/base.entity",{"_index":328,"title":{},"body":{"entities/Car.html":{},"entities/User.html":{}}}],["car/entities/car.entity",{"_index":378,"title":{},"body":{"modules/CarModule.html":{},"injectables/CarService.html":{}}}],["carcontroller",{"_index":329,"title":{"controllers/CarController.html":{}},"body":{"controllers/CarController.html":{},"modules/CarModule.html":{},"coverage.html":{}}}],["carimg",{"_index":318,"title":{},"body":{"entities/Car.html":{},"classes/CreateCarDto.html":{}}}],["carmodule",{"_index":85,"title":{"modules/CarModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CarModule.html":{},"modules.html":{},"overview.html":{}}}],["carname",{"_index":319,"title":{},"body":{"entities/Car.html":{},"classes/CreateCarDto.html":{}}}],["carservice",{"_index":354,"title":{"injectables/CarService.html":{}},"body":{"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"coverage.html":{},"overview.html":{}}}],["cascade",{"_index":610,"title":{},"body":{"entities/Term.html":{},"entities/User.html":{}}}],["catch",{"_index":517,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["category",{"_index":320,"title":{},"body":{"entities/Car.html":{},"classes/CreateCarDto.html":{}}}],["channel",{"_index":841,"title":{},"body":{"index.html":{}}}],["check",{"_index":827,"title":{},"body":{"index.html":{}}}],["class",{"_index":15,"title":{"classes/Auth.html":{},"classes/Base.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":140,"title":{},"body":{"classes/Auth.html":{},"classes/Base.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"overview.html":{}}}],["clientid",{"_index":502,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["clientsecret",{"_index":504,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["cluster_appmodule",{"_index":81,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":82,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":83,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":238,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":240,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":239,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_carmodule",{"_index":372,"title":{},"body":{"modules/CarModule.html":{},"overview.html":{}}}],["cluster_carmodule_providers",{"_index":373,"title":{},"body":{"modules/CarModule.html":{},"overview.html":{}}}],["cluster_mailmodule",{"_index":548,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_exports",{"_index":550,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_mailmodule_providers",{"_index":549,"title":{},"body":{"modules/MailModule.html":{},"overview.html":{}}}],["cluster_termmodule",{"_index":632,"title":{},"body":{"modules/TermModule.html":{},"overview.html":{}}}],["cluster_termmodule_providers",{"_index":633,"title":{},"body":{"modules/TermModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":710,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":712,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":711,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["column",{"_index":322,"title":{},"body":{"entities/Car.html":{},"entities/Term.html":{},"entities/User.html":{}}}],["column({default",{"_index":600,"title":{},"body":{"entities/Term.html":{}}}],["column({nullable",{"_index":670,"title":{},"body":{"entities/User.html":{}}}],["column({type",{"_index":675,"title":{},"body":{"entities/User.html":{}}}],["column({unique",{"_index":668,"title":{},"body":{"entities/User.html":{}}}],["come",{"_index":830,"title":{},"body":{"index.html":{}}}],["config",{"_index":492,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["config.get('google_callback_url",{"_index":507,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["config.get('google_client_id",{"_index":503,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["config.get('google_client_secret",{"_index":505,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["config.get('kakao_callback_url",{"_index":530,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["config.get('kakao_client_id",{"_index":529,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["configmodule",{"_index":96,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/DbModule.html":{},"modules/MailModule.html":{},"modules/RedisModule.html":{}}}],["configmodule.forroot",{"_index":107,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":27,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{}}}],["configservice.get('access_token_secret",{"_index":55,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["configservice.get('mail_password",{"_index":567,"title":{},"body":{"injectables/MailService.html":{}}}],["configservice.get('mail_service",{"_index":564,"title":{},"body":{"injectables/MailService.html":{}}}],["configservice.get('mail_user",{"_index":565,"title":{},"body":{"injectables/MailService.html":{}}}],["configservice.get('naver_callback_url",{"_index":577,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_client_id",{"_index":575,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('naver_client_secret",{"_index":576,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["configservice.get('redis_host",{"_index":589,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_password",{"_index":590,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_port",{"_index":591,"title":{},"body":{"modules/RedisModule.html":{}}}],["configservice.get('redis_ttl",{"_index":593,"title":{},"body":{"modules/RedisModule.html":{}}}],["console.log",{"_index":515,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["console.log(e",{"_index":706,"title":{},"body":{"entities/User.html":{}}}],["const",{"_index":212,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":25,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":537,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["constructor(config",{"_index":490,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{}}}],["constructor(configservice",{"_index":26,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{}}}],["constructor(private",{"_index":70,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CarController.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"controllers/TermController.html":{},"controllers/UserController.html":{}}}],["constructor(repository",{"_index":381,"title":{},"body":{"injectables/CarService.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["controller",{"_index":60,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":208,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('car",{"_index":360,"title":{},"body":{"controllers/CarController.html":{}}}],["controller('term",{"_index":627,"title":{},"body":{"controllers/TermController.html":{}}}],["controller('user",{"_index":709,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":62,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["cookie",{"_index":774,"title":{},"body":{"dependencies.html":{}}}],["courses",{"_index":848,"title":{},"body":{"index.html":{}}}],["coverage",{"_index":726,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":331,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":365,"title":{},"body":{"controllers/CarController.html":{}}}],["create(@req",{"_index":628,"title":{},"body":{"controllers/TermController.html":{}}}],["create(dto",{"_index":336,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/UserService.html":{}}}],["create(req",{"_index":616,"title":{},"body":{"controllers/TermController.html":{}}}],["create(user",{"_index":639,"title":{},"body":{"injectables/TermService.html":{}}}],["createat",{"_index":300,"title":{},"body":{"classes/Base.html":{}}}],["createauthdto",{"_index":398,"title":{"classes/CreateAuthDto.html":{}},"body":{"classes/CreateAuthDto.html":{},"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["createcardto",{"_index":337,"title":{"classes/CreateCarDto.html":{}},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/UpdateCarDto.html":{},"coverage.html":{}}}],["createdatecolumn",{"_index":304,"title":{},"body":{"classes/Base.html":{}}}],["createtermdto",{"_index":418,"title":{"classes/CreateTermDto.html":{}},"body":{"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"classes/UpdateTermDto.html":{},"coverage.html":{}}}],["createtransport",{"_index":561,"title":{},"body":{"injectables/MailService.html":{}}}],["createuserdto",{"_index":179,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["d",{"_index":702,"title":{},"body":{"entities/User.html":{}}}],["database",{"_index":478,"title":{},"body":{"modules/DbModule.html":{}}}],["date",{"_index":303,"title":{},"body":{"classes/Base.html":{}}}],["db/db.module",{"_index":100,"title":{},"body":{"modules/AppModule.html":{}}}],["dbmodule",{"_index":86,"title":{"modules/DbModule.html":{}},"body":{"modules/AppModule.html":{},"modules/DbModule.html":{},"modules.html":{},"overview.html":{}}}],["declarations",{"_index":77,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["decorators",{"_index":65,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"entities/User.html":{}}}],["deeper",{"_index":843,"title":{},"body":{"index.html":{}}}],["default",{"_index":613,"title":{},"body":{"entities/Term.html":{},"entities/User.html":{}}}],["defined",{"_index":29,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":332,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["delete('/:id",{"_index":341,"title":{},"body":{"controllers/CarController.html":{}}}],["delete(@param('id",{"_index":370,"title":{},"body":{"controllers/CarController.html":{}}}],["delete(id",{"_index":340,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["deleteat",{"_index":301,"title":{},"body":{"classes/Base.html":{}}}],["deletedatecolumn",{"_index":306,"title":{},"body":{"classes/Base.html":{}}}],["dependencies",{"_index":75,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":805,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":814,"title":{},"body":{"index.html":{}}}],["devtools",{"_index":856,"title":{},"body":{"index.html":{}}}],["discord",{"_index":840,"title":{},"body":{"index.html":{}}}],["displayname",{"_index":509,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["dive",{"_index":842,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":727,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["done",{"_index":496,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["done(null",{"_index":516,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["dto",{"_index":182,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["dto.email",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["e",{"_index":518,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["e.status",{"_index":519,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["e2e",{"_index":824,"title":{},"body":{"index.html":{}}}],["eager",{"_index":679,"title":{},"body":{"entities/User.html":{}}}],["efficient",{"_index":800,"title":{},"body":{"index.html":{}}}],["email",{"_index":271,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["email@exam.com",{"_index":444,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["email@exam.com'})@isemail",{"_index":545,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["enterprise",{"_index":861,"title":{},"body":{"index.html":{}}}],["entities",{"_index":316,"title":{},"body":{"entities/Car.html":{},"modules/DbModule.html":{},"entities/Term.html":{},"entities/User.html":{},"overview.html":{}}}],["entity",{"_index":315,"title":{"entities/Car.html":{},"entities/Term.html":{},"entities/User.html":{}},"body":{"entities/Car.html":{},"entities/Term.html":{},"entities/User.html":{},"coverage.html":{}}}],["entity{.ts,.js",{"_index":481,"title":{},"body":{"modules/DbModule.html":{}}}],["enum",{"_index":676,"title":{},"body":{"entities/User.html":{}}}],["enumerations",{"_index":789,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["example",{"_index":415,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"index.html":{}}}],["exclude",{"_index":686,"title":{},"body":{"entities/User.html":{}}}],["experience",{"_index":845,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":295,"title":{},"body":{"injectables/AuthService.html":{}}}],["export",{"_index":14,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["express",{"_index":752,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":7,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"entities/Car.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"interfaces/RequestUserInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{}}}],["extractjwt",{"_index":42,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":53,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["false",{"_index":430,"title":{},"body":{"classes/CreateTermDto.html":{},"entities/Term.html":{}}}],["few",{"_index":828,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["finduserby",{"_index":717,"title":{},"body":{"injectables/UserService.html":{}}}],["finduserby(key",{"_index":720,"title":{},"body":{"injectables/UserService.html":{}}}],["follow",{"_index":865,"title":{},"body":{"index.html":{}}}],["framework",{"_index":798,"title":{},"body":{"index.html":{}}}],["full",{"_index":860,"title":{},"body":{"index.html":{}}}],["function",{"_index":740,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":792,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateaccesstoken",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateaccesstoken(userid",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["get('/:id",{"_index":346,"title":{},"body":{"controllers/CarController.html":{}}}],["get('/all",{"_index":343,"title":{},"body":{"controllers/CarController.html":{}}}],["get('/google",{"_index":225,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google')@useguards(googleauthguard",{"_index":162,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback",{"_index":228,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/google/callback')@useguards(googleauthguard",{"_index":160,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao",{"_index":230,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao')@useguards(kakaoauthguard",{"_index":167,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao/callback",{"_index":232,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/kakao/callback')@useguards(kakaoauthguard",{"_index":165,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver",{"_index":234,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver')@useguards(naverauthguard",{"_index":176,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver/callback",{"_index":236,"title":{},"body":{"controllers/AuthController.html":{}}}],["get('/naver/callback')@useguards(naverauthguard",{"_index":174,"title":{},"body":{"controllers/AuthController.html":{}}}],["get()@useguards(accesstokenguard)@apibearerauth",{"_index":156,"title":{},"body":{"controllers/AuthController.html":{}}}],["getall",{"_index":333,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["getcarbyid",{"_index":334,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["getcarbyid(@param('id",{"_index":362,"title":{},"body":{"controllers/CarController.html":{}}}],["getcarbyid(id",{"_index":345,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["gethello",{"_index":64,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getting",{"_index":794,"title":{"index.html":{}},"body":{}}],["google",{"_index":500,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["google_callback_url",{"_index":128,"title":{},"body":{"modules/AppModule.html":{}}}],["google_client_id",{"_index":126,"title":{},"body":{"modules/AppModule.html":{}}}],["google_client_secret",{"_index":127,"title":{},"body":{"modules/AppModule.html":{}}}],["googleauthguard",{"_index":201,"title":{"injectables/GoogleAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["googleauthstrategy",{"_index":241,"title":{"injectables/GoogleAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/GoogleAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["googlecallback",{"_index":146,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(@req",{"_index":229,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlecallback(req",{"_index":159,"title":{},"body":{"controllers/AuthController.html":{}}}],["googlelogin",{"_index":147,"title":{},"body":{"controllers/AuthController.html":{}}}],["graph",{"_index":851,"title":{},"body":{"index.html":{},"modules.html":{}}}],["gravatar",{"_index":685,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["gravatar.url(this.email",{"_index":697,"title":{},"body":{"entities/User.html":{}}}],["grow",{"_index":876,"title":{},"body":{"index.html":{}}}],["hands",{"_index":844,"title":{},"body":{"index.html":{}}}],["handy",{"_index":831,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":98,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["help",{"_index":858,"title":{},"body":{"index.html":{}}}],["here",{"_index":884,"title":{},"body":{"index.html":{}}}],["host",{"_index":472,"title":{},"body":{"modules/DbModule.html":{},"modules/RedisModule.html":{}}}],["html",{"_index":290,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpexception",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["https",{"_index":705,"title":{},"body":{"entities/User.html":{}}}],["https://nestjs.com",{"_index":890,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":184,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["httpstatus.bad_request",{"_index":286,"title":{},"body":{"injectables/AuthService.html":{}}}],["httpstatus.conflict",{"_index":514,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["httpstatus.ok",{"_index":227,"title":{},"body":{"controllers/AuthController.html":{}}}],["id",{"_index":56,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"classes/Base.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"entities/Term.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":728,"title":{},"body":{"coverage.html":{}}}],["import",{"_index":9,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":95,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/DbModule.html":{},"modules/MailModule.html":{},"modules/RedisModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":468,"title":{},"body":{"modules/DbModule.html":{},"modules/RedisModule.html":{}}}],["injectable",{"_index":0,"title":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":390,"title":{},"body":{"injectables/CarService.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["injectrepository(car",{"_index":391,"title":{},"body":{"injectables/CarService.html":{}}}],["injectrepository(term",{"_index":644,"title":{},"body":{"injectables/TermService.html":{}}}],["injectrepository(user",{"_index":724,"title":{},"body":{"injectables/UserService.html":{}}}],["installcompile",{"_index":812,"title":{},"body":{"index.html":{}}}],["interact",{"_index":852,"title":{},"body":{"index.html":{}}}],["interface",{"_index":594,"title":{"interfaces/RequestUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{}},"body":{"interfaces/RequestUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["interfaces",{"_index":595,"title":{},"body":{"interfaces/RequestUserInterface.html":{},"interfaces/TokenPayloadInterface.html":{},"overview.html":{}}}],["isboolean",{"_index":435,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["isboolean()@apiproperty({example",{"_index":427,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["isemail",{"_index":458,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{}}}],["isemail()@apiproperty({example",{"_index":443,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isglobal",{"_index":588,"title":{},"body":{"modules/RedisModule.html":{}}}],["isnotempty",{"_index":459,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":413,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber()@apiproperty({example",{"_index":449,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":408,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/CreateUserDto.html":{}}}],["isstring()@isnotempty()@minlength(2)@apiproperty({example",{"_index":456,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring()@minlength(7)@apiproperty({example",{"_index":446,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["jang",{"_index":137,"title":{},"body":{"injectables/AppService.html":{}}}],["job",{"_index":869,"title":{},"body":{"index.html":{}}}],["jobs",{"_index":871,"title":{},"body":{"index.html":{}}}],["joi",{"_index":97,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.number().required",{"_index":116,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":109,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":111,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":882,"title":{},"body":{"index.html":{}}}],["joincolumn",{"_index":684,"title":{},"body":{"entities/User.html":{}}}],["jwt",{"_index":45,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":52,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["jwtmodule",{"_index":246,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":255,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["k7",{"_index":416,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["k7'})@isstring",{"_index":406,"title":{},"body":{"classes/CreateCarDto.html":{}}}],["kakao",{"_index":528,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["kakao_callback_url",{"_index":130,"title":{},"body":{"modules/AppModule.html":{}}}],["kakao_client_id",{"_index":129,"title":{},"body":{"modules/AppModule.html":{}}}],["kakaoauthguard",{"_index":203,"title":{"injectables/KakaoAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["kakaoauthstrategy",{"_index":242,"title":{"injectables/KakaoAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/KakaoAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kakaocallback",{"_index":148,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaocallback(@req",{"_index":233,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaocallback(req",{"_index":164,"title":{},"body":{"controllers/AuthController.html":{}}}],["kakaologin",{"_index":149,"title":{},"body":{"controllers/AuthController.html":{}}}],["kamil",{"_index":887,"title":{},"body":{"index.html":{}}}],["key",{"_index":723,"title":{},"body":{"injectables/UserService.html":{}}}],["learn",{"_index":835,"title":{},"body":{"index.html":{}}}],["legend",{"_index":76,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["license",{"_index":893,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":874,"title":{},"body":{"index.html":{}}}],["linkedin",{"_index":867,"title":{},"body":{"index.html":{}}}],["local",{"_index":541,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["localauthguard",{"_index":195,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localauthstrategy",{"_index":243,"title":{"injectables/LocalAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":150,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(@req",{"_index":219,"title":{},"body":{"controllers/AuthController.html":{}}}],["login(dto",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(req",{"_index":169,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":171,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["looking",{"_index":868,"title":{},"body":{"index.html":{}}}],["loop",{"_index":863,"title":{},"body":{"index.html":{}}}],["mail",{"_index":553,"title":{},"body":{"injectables/MailService.html":{}}}],["mail.options",{"_index":557,"title":{},"body":{"injectables/MailService.html":{}}}],["mail/mail.module",{"_index":104,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["mail/mail.service",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{}}}],["mail_password",{"_index":119,"title":{},"body":{"modules/AppModule.html":{}}}],["mail_service",{"_index":117,"title":{},"body":{"modules/AppModule.html":{}}}],["mail_user",{"_index":118,"title":{},"body":{"modules/AppModule.html":{}}}],["mailmodule",{"_index":87,"title":{"modules/MailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/MailModule.html":{},"modules.html":{},"overview.html":{}}}],["mailservice",{"_index":260,"title":{"injectables/MailService.html":{}},"body":{"injectables/AuthService.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"coverage.html":{},"overview.html":{}}}],["manager",{"_index":584,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["match",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{}}}],["matching",{"_index":17,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["metadata",{"_index":784,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":22,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["minlength",{"_index":460,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(2",{"_index":464,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["minlength(7",{"_index":465,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["miscellaneous",{"_index":788,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":873,"title":{},"body":{"index.html":{}}}],["mm",{"_index":703,"title":{},"body":{"entities/User.html":{}}}],["mode",{"_index":817,"title":{},"body":{"index.html":{}}}],["module",{"_index":72,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/DbModule.html":{},"modules/MailModule.html":{},"modules/RedisModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/DbModule.html":{},"modules/MailModule.html":{},"modules/RedisModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["modules",{"_index":74,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/DbModule.html":{},"modules/MailModule.html":{},"modules/RedisModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":836,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":888,"title":{},"body":{"index.html":{}}}],["name",{"_index":32,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["naver",{"_index":574,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["naver_callback_url",{"_index":133,"title":{},"body":{"modules/AppModule.html":{}}}],["naver_client_id",{"_index":131,"title":{},"body":{"modules/AppModule.html":{}}}],["naver_client_secret",{"_index":132,"title":{},"body":{"modules/AppModule.html":{}}}],["naverauthguard",{"_index":205,"title":{"injectables/NaverAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["naverauthstrategy",{"_index":244,"title":{"injectables/NaverAuthStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/NaverAuthStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["navercallback",{"_index":151,"title":{},"body":{"controllers/AuthController.html":{}}}],["navercallback(@req",{"_index":237,"title":{},"body":{"controllers/AuthController.html":{}}}],["navercallback(req",{"_index":173,"title":{},"body":{"controllers/AuthController.html":{}}}],["naverlogin",{"_index":152,"title":{},"body":{"controllers/AuthController.html":{}}}],["need",{"_index":857,"title":{},"body":{"index.html":{}}}],["nest",{"_index":806,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":892,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":833,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":11,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/cache",{"_index":581,"title":{},"body":{"modules/RedisModule.html":{}}}],["nestjs/config",{"_index":46,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":247,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":657,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":13,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":751,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":190,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"controllers/TermController.html":{},"classes/UpdateTermDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":376,"title":{},"body":{"modules/CarModule.html":{},"injectables/CarService.html":{},"modules/DbModule.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":285,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["newuser",{"_index":521,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["node.js",{"_index":797,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":562,"title":{},"body":{"injectables/MailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":560,"title":{},"body":{"injectables/MailService.html":{}}}],["notfoundexception",{"_index":389,"title":{},"body":{"injectables/CarService.html":{},"injectables/UserService.html":{}}}],["npm",{"_index":811,"title":{},"body":{"index.html":{}}}],["nullable",{"_index":688,"title":{},"body":{"entities/User.html":{}}}],["number",{"_index":326,"title":{},"body":{"entities/Car.html":{},"classes/CreateCarDto.html":{},"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["oauth2",{"_index":501,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"dependencies.html":{}}}],["offer",{"_index":870,"title":{},"body":{"index.html":{}}}],["official",{"_index":846,"title":{},"body":{"index.html":{}}}],["ondelete",{"_index":609,"title":{},"body":{"entities/Term.html":{}}}],["onetoone",{"_index":612,"title":{},"body":{"entities/Term.html":{},"entities/User.html":{}}}],["onetoone(undefined",{"_index":607,"title":{},"body":{"entities/Term.html":{},"entities/User.html":{}}}],["open",{"_index":875,"title":{},"body":{"index.html":{}}}],["optional",{"_index":34,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["options",{"_index":559,"title":{},"body":{"injectables/MailService.html":{}}}],["out",{"_index":93,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"index.html":{},"overview.html":{}}}],["overview",{"_index":898,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":744,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":352,"title":{},"body":{"controllers/CarController.html":{}}}],["parameters",{"_index":31,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["parser",{"_index":758,"title":{},"body":{"dependencies.html":{}}}],["part",{"_index":859,"title":{},"body":{"index.html":{}}}],["partialtype",{"_index":656,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{}}}],["partialtype(createauthdto",{"_index":655,"title":{},"body":{"classes/UpdateAuthDto.html":{}}}],["partialtype(createcardto",{"_index":661,"title":{},"body":{"classes/UpdateCarDto.html":{}}}],["partialtype(createtermdto",{"_index":663,"title":{},"body":{"classes/UpdateTermDto.html":{}}}],["partialtype(createuserdto",{"_index":666,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["pass",{"_index":566,"title":{},"body":{"injectables/MailService.html":{}}}],["passport",{"_index":44,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"dependencies.html":{}}}],["passportstrategy",{"_index":41,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["passportstrategy(strategy",{"_index":20,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["password",{"_index":438,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/RedisModule.html":{},"entities/User.html":{}}}],["payload",{"_index":38,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{}}}],["payload.userid",{"_index":59,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["pg",{"_index":701,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["phone",{"_index":439,"title":{},"body":{"classes/CreateUserDto.html":{},"entities/User.html":{}}}],["picture",{"_index":510,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["please",{"_index":839,"title":{},"body":{"index.html":{}}}],["port",{"_index":474,"title":{},"body":{"modules/DbModule.html":{},"modules/RedisModule.html":{}}}],["post",{"_index":185,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{}}}],["post('/create",{"_index":364,"title":{},"body":{"controllers/CarController.html":{}}}],["post('/create')@apibody({type",{"_index":338,"title":{},"body":{"controllers/CarController.html":{}}}],["post('/login",{"_index":217,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@useguards(localauthguard)@apibody({type",{"_index":170,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":210,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup')@apibody({type",{"_index":180,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@useguards(accesstokenguard",{"_index":617,"title":{},"body":{"controllers/TermController.html":{}}}],["postgres",{"_index":471,"title":{},"body":{"modules/DbModule.html":{}}}],["postgres_db",{"_index":114,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_host",{"_index":110,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_password",{"_index":113,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_port",{"_index":115,"title":{},"body":{"modules/AppModule.html":{}}}],["postgres_user",{"_index":112,"title":{},"body":{"modules/AppModule.html":{}}}],["prefix",{"_index":144,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CarController.html":{},"controllers/TermController.html":{},"controllers/UserController.html":{}}}],["price",{"_index":321,"title":{},"body":{"entities/Car.html":{},"classes/CreateCarDto.html":{}}}],["primarygeneratedcolumn",{"_index":312,"title":{},"body":{"classes/Base.html":{},"entities/Term.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":308,"title":{},"body":{"classes/Base.html":{},"entities/Term.html":{}}}],["private",{"_index":49,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":819,"title":{},"body":{"index.html":{}}}],["profile",{"_index":495,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["profile._json",{"_index":578,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["profile._json.kakao_account",{"_index":533,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile._json.properties",{"_index":532,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["profile_image",{"_index":531,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["profileimg",{"_index":440,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["progressive",{"_index":796,"title":{},"body":{"index.html":{}}}],["project",{"_index":809,"title":{},"body":{"index.html":{}}}],["properties",{"_index":299,"title":{"properties.html":{}},"body":{"classes/Base.html":{},"entities/Car.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"properties.html":{}}}],["protocol",{"_index":704,"title":{},"body":{"entities/User.html":{}}}],["provider",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{},"miscellaneous/enumerations.html":{}}}],["provider.google",{"_index":489,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["provider.kakao",{"_index":526,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{}}}],["provider.local",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{},"injectables/LocalAuthStrategy.html":{},"entities/User.html":{}}}],["provider.naver",{"_index":572,"title":{},"body":{"injectables/NaverAuthStrategy.html":{}}}],["providers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["public",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"entities/Term.html":{},"entities/User.html":{}}}],["put",{"_index":353,"title":{},"body":{"controllers/CarController.html":{},"controllers/TermController.html":{}}}],["put('/:id",{"_index":367,"title":{},"body":{"controllers/CarController.html":{}}}],["put('/:id')@apibody({type",{"_index":350,"title":{},"body":{"controllers/CarController.html":{}}}],["put()@useguards(accesstokenguard",{"_index":621,"title":{},"body":{"controllers/TermController.html":{}}}],["questions",{"_index":837,"title":{},"body":{"index.html":{}}}],["r",{"_index":700,"title":{},"body":{"entities/User.html":{}}}],["read",{"_index":883,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":50,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"controllers/UserController.html":{}}}],["real",{"_index":853,"title":{},"body":{"index.html":{}}}],["redis",{"_index":585,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["redis/redis.module",{"_index":105,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_host",{"_index":122,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_password",{"_index":123,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_port",{"_index":124,"title":{},"body":{"modules/AppModule.html":{}}}],["redis_ttl",{"_index":125,"title":{},"body":{"modules/AppModule.html":{}}}],["redismodule",{"_index":88,"title":{"modules/RedisModule.html":{}},"body":{"modules/AppModule.html":{},"modules/RedisModule.html":{},"modules.html":{},"overview.html":{}}}],["redisstore",{"_index":582,"title":{},"body":{"modules/RedisModule.html":{}}}],["reflect",{"_index":783,"title":{},"body":{"dependencies.html":{}}}],["refreshtoken",{"_index":494,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["repository",{"_index":382,"title":{},"body":{"injectables/CarService.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":158,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["req.user",{"_index":220,"title":{},"body":{"controllers/AuthController.html":{}}}],["request",{"_index":597,"title":{},"body":{"interfaces/RequestUserInterface.html":{}}}],["requestuserinterface",{"_index":155,"title":{"interfaces/RequestUserInterface.html":{}},"body":{"controllers/AuthController.html":{},"interfaces/RequestUserInterface.html":{},"controllers/TermController.html":{},"coverage.html":{}}}],["reset",{"_index":92,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resources",{"_index":829,"title":{},"body":{"index.html":{}}}],["result",{"_index":647,"title":{},"body":{"injectables/TermService.html":{}}}],["result.affected",{"_index":650,"title":{},"body":{"injectables/TermService.html":{}}}],["results",{"_index":16,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":57,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"modules/RedisModule.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":39,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["root/app.controller",{"_index":99,"title":{},"body":{"modules/AppModule.html":{}}}],["root/app.service",{"_index":69,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["root/term/dto/create",{"_index":462,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{}}}],["root/term/dto/update",{"_index":625,"title":{},"body":{"controllers/TermController.html":{},"injectables/TermService.html":{}}}],["root/term/entities/term.entity",{"_index":461,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"entities/User.html":{}}}],["run",{"_index":813,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":698,"title":{},"body":{"entities/User.html":{}}}],["saltvalue",{"_index":692,"title":{},"body":{"entities/User.html":{}}}],["scalable",{"_index":801,"title":{},"body":{"index.html":{}}}],["scope",{"_index":508,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["secret",{"_index":293,"title":{},"body":{"injectables/AuthService.html":{}}}],["secretorkey",{"_index":54,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["sendmail",{"_index":554,"title":{},"body":{"injectables/MailService.html":{}}}],["sendmail(options",{"_index":556,"title":{},"body":{"injectables/MailService.html":{}}}],["server",{"_index":802,"title":{},"body":{"index.html":{}}}],["service",{"_index":470,"title":{},"body":{"modules/DbModule.html":{},"injectables/MailService.html":{}}}],["service.get('postgres_db",{"_index":479,"title":{},"body":{"modules/DbModule.html":{}}}],["service.get('postgres_host",{"_index":473,"title":{},"body":{"modules/DbModule.html":{}}}],["service.get('postgres_password",{"_index":477,"title":{},"body":{"modules/DbModule.html":{}}}],["service.get('postgres_port",{"_index":475,"title":{},"body":{"modules/DbModule.html":{}}}],["service.get('postgres_user",{"_index":476,"title":{},"body":{"modules/DbModule.html":{}}}],["setup",{"_index":810,"title":{},"body":{"index.html":{}}}],["side",{"_index":803,"title":{},"body":{"index.html":{}}}],["signup",{"_index":153,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":211,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(dto",{"_index":178,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signupmail",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["signupmail(email",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"injectables/AccessTokenStrategy.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"classes/Auth.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"modules/CarModule.html":{},"injectables/CarService.html":{},"classes/CreateAuthDto.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"modules/MailModule.html":{},"injectables/MailService.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"modules/RedisModule.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateTermDto.html":{},"classes/UpdateUserDto.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":878,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../provider.enum.ts",{"_index":790,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":63,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":66,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":94,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":134,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":135,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":143,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:100",{"_index":175,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:29",{"_index":181,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:40",{"_index":172,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:52",{"_index":157,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:59",{"_index":163,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:66",{"_index":161,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:76",{"_index":168,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:83",{"_index":166,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:93",{"_index":177,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":245,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:13",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:22",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:45",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:55",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/create",{"_index":399,"title":{},"body":{"classes/CreateAuthDto.html":{},"coverage.html":{}}}],["src/auth/dto/update",{"_index":654,"title":{},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["src/auth/entities/auth.entity.ts",{"_index":141,"title":{},"body":{"classes/Auth.html":{},"coverage.html":{}}}],["src/auth/guard/accesstoken.guard.ts",{"_index":6,"title":{},"body":{"injectables/AccessTokenGuard.html":{},"coverage.html":{}}}],["src/auth/guard/google",{"_index":484,"title":{},"body":{"injectables/GoogleAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/kakao",{"_index":523,"title":{},"body":{"injectables/KakaoAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/local",{"_index":534,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guard/naver",{"_index":569,"title":{},"body":{"injectables/NaverAuthGuard.html":{},"coverage.html":{}}}],["src/auth/interface/requestuser.interface.ts",{"_index":596,"title":{},"body":{"interfaces/RequestUserInterface.html":{},"coverage.html":{}}}],["src/auth/interface/tokenpayload.interface.ts",{"_index":652,"title":{},"body":{"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["src/auth/strategy/accesstoken.strategy.ts",{"_index":19,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/accesstoken.strategy.ts:21",{"_index":37,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategy/accesstoken.strategy.ts:9",{"_index":30,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["src/auth/strategy/google",{"_index":487,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/kakao",{"_index":525,"title":{},"body":{"injectables/KakaoAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/local",{"_index":536,"title":{},"body":{"injectables/LocalAuthStrategy.html":{},"coverage.html":{}}}],["src/auth/strategy/naver",{"_index":571,"title":{},"body":{"injectables/NaverAuthStrategy.html":{},"coverage.html":{}}}],["src/car/car.controller.ts",{"_index":330,"title":{},"body":{"controllers/CarController.html":{},"coverage.html":{}}}],["src/car/car.controller.ts:22",{"_index":344,"title":{},"body":{"controllers/CarController.html":{}}}],["src/car/car.controller.ts:28",{"_index":347,"title":{},"body":{"controllers/CarController.html":{}}}],["src/car/car.controller.ts:35",{"_index":339,"title":{},"body":{"controllers/CarController.html":{}}}],["src/car/car.controller.ts:42",{"_index":351,"title":{},"body":{"controllers/CarController.html":{}}}],["src/car/car.controller.ts:48",{"_index":342,"title":{},"body":{"controllers/CarController.html":{}}}],["src/car/car.module.ts",{"_index":374,"title":{},"body":{"modules/CarModule.html":{}}}],["src/car/car.service.ts",{"_index":380,"title":{},"body":{"injectables/CarService.html":{},"coverage.html":{}}}],["src/car/car.service.ts:16",{"_index":386,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/car.service.ts:21",{"_index":387,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/car.service.ts:32",{"_index":384,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/car.service.ts:40",{"_index":388,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/car.service.ts:51",{"_index":385,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/car.service.ts:9",{"_index":383,"title":{},"body":{"injectables/CarService.html":{}}}],["src/car/dto/create",{"_index":401,"title":{},"body":{"classes/CreateCarDto.html":{},"coverage.html":{}}}],["src/car/dto/update",{"_index":660,"title":{},"body":{"classes/UpdateCarDto.html":{},"coverage.html":{}}}],["src/car/entities/base.entity.ts",{"_index":298,"title":{},"body":{"classes/Base.html":{},"coverage.html":{}}}],["src/car/entities/base.entity.ts:10",{"_index":309,"title":{},"body":{"classes/Base.html":{}}}],["src/car/entities/base.entity.ts:13",{"_index":305,"title":{},"body":{"classes/Base.html":{}}}],["src/car/entities/base.entity.ts:16",{"_index":311,"title":{},"body":{"classes/Base.html":{}}}],["src/car/entities/base.entity.ts:19",{"_index":307,"title":{},"body":{"classes/Base.html":{}}}],["src/car/entities/car.entity.ts",{"_index":317,"title":{},"body":{"entities/Car.html":{},"coverage.html":{}}}],["src/car/entities/car.entity.ts:10",{"_index":327,"title":{},"body":{"entities/Car.html":{}}}],["src/car/entities/car.entity.ts:13",{"_index":325,"title":{},"body":{"entities/Car.html":{}}}],["src/car/entities/car.entity.ts:16",{"_index":323,"title":{},"body":{"entities/Car.html":{}}}],["src/car/entities/car.entity.ts:7",{"_index":324,"title":{},"body":{"entities/Car.html":{}}}],["src/db/db.module.ts",{"_index":466,"title":{},"body":{"modules/DbModule.html":{}}}],["src/mail/mail.module.ts",{"_index":551,"title":{},"body":{"modules/MailModule.html":{}}}],["src/mail/mail.service.ts",{"_index":552,"title":{},"body":{"injectables/MailService.html":{},"coverage.html":{}}}],["src/mail/mail.service.ts:21",{"_index":558,"title":{},"body":{"injectables/MailService.html":{}}}],["src/mail/mail.service.ts:8",{"_index":555,"title":{},"body":{"injectables/MailService.html":{}}}],["src/main.ts",{"_index":739,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/redis/redis.module.ts",{"_index":579,"title":{},"body":{"modules/RedisModule.html":{}}}],["src/term/dto/create",{"_index":419,"title":{},"body":{"classes/CreateTermDto.html":{},"coverage.html":{}}}],["src/term/dto/update",{"_index":662,"title":{},"body":{"classes/UpdateTermDto.html":{},"coverage.html":{}}}],["src/term/entities/term.entity.ts",{"_index":599,"title":{},"body":{"entities/Term.html":{},"coverage.html":{}}}],["src/term/entities/term.entity.ts:10",{"_index":605,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:13",{"_index":601,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:16",{"_index":604,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:19",{"_index":602,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:22",{"_index":603,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:25",{"_index":611,"title":{},"body":{"entities/Term.html":{}}}],["src/term/entities/term.entity.ts:7",{"_index":606,"title":{},"body":{"entities/Term.html":{}}}],["src/term/term.controller.ts",{"_index":615,"title":{},"body":{"controllers/TermController.html":{},"coverage.html":{}}}],["src/term/term.controller.ts:18",{"_index":618,"title":{},"body":{"controllers/TermController.html":{}}}],["src/term/term.controller.ts:25",{"_index":622,"title":{},"body":{"controllers/TermController.html":{}}}],["src/term/term.module.ts",{"_index":634,"title":{},"body":{"modules/TermModule.html":{}}}],["src/term/term.service.ts",{"_index":637,"title":{},"body":{"injectables/TermService.html":{},"coverage.html":{}}}],["src/term/term.service.ts:10",{"_index":638,"title":{},"body":{"injectables/TermService.html":{}}}],["src/term/term.service.ts:17",{"_index":640,"title":{},"body":{"injectables/TermService.html":{}}}],["src/term/term.service.ts:25",{"_index":642,"title":{},"body":{"injectables/TermService.html":{}}}],["src/user/dto/create",{"_index":436,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/user/dto/login",{"_index":544,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/user/dto/update",{"_index":665,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/entities/provider.enum.ts",{"_index":791,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/entities/user.entity.ts",{"_index":667,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:12",{"_index":682,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:16",{"_index":672,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:19",{"_index":669,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:22",{"_index":673,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:25",{"_index":674,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:32",{"_index":678,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:36",{"_index":681,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":708,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.module.ts",{"_index":713,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":716,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:15",{"_index":719,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:23",{"_index":722,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:8",{"_index":718,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":815,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":818,"title":{},"body":{"index.html":{}}}],["start:prodrun",{"_index":820,"title":{},"body":{"index.html":{}}}],["started",{"_index":795,"title":{"index.html":{}},"body":{}}],["starter",{"_index":808,"title":{},"body":{"index.html":{}}}],["statements",{"_index":729,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":862,"title":{},"body":{"index.html":{}}}],["store",{"_index":586,"title":{},"body":{"modules/RedisModule.html":{},"dependencies.html":{}}}],["strategy",{"_index":43,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["string",{"_index":67,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/NaverAuthStrategy.html":{},"entities/Term.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["subject",{"_index":288,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":51,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["support",{"_index":838,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":895,"title":{},"body":{"modules.html":{}}}],["synchronize",{"_index":483,"title":{},"body":{"modules/DbModule.html":{}}}],["table",{"_index":743,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":742,"title":{},"body":{"coverage.html":{}}}],["term",{"_index":441,"title":{"entities/Term.html":{}},"body":{"classes/CreateUserDto.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"entities/User.html":{},"coverage.html":{}}}],["term.controller",{"_index":635,"title":{},"body":{"modules/TermModule.html":{}}}],["term.dto",{"_index":463,"title":{},"body":{"classes/CreateUserDto.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"classes/UpdateTermDto.html":{}}}],["term.dto.ts",{"_index":420,"title":{},"body":{"classes/CreateTermDto.html":{},"classes/UpdateTermDto.html":{},"coverage.html":{}}}],["term.dto.ts:11",{"_index":429,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["term.dto.ts:15",{"_index":433,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["term.dto.ts:19",{"_index":431,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["term.dto.ts:23",{"_index":432,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["term.dto.ts:7",{"_index":434,"title":{},"body":{"classes/CreateTermDto.html":{}}}],["term.service",{"_index":624,"title":{},"body":{"controllers/TermController.html":{},"modules/TermModule.html":{}}}],["term/term.module",{"_index":106,"title":{},"body":{"modules/AppModule.html":{}}}],["termcontroller",{"_index":614,"title":{"controllers/TermController.html":{}},"body":{"controllers/TermController.html":{},"modules/TermModule.html":{},"coverage.html":{}}}],["termmodule",{"_index":89,"title":{"modules/TermModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TermModule.html":{},"modules.html":{},"overview.html":{}}}],["termservice",{"_index":623,"title":{"injectables/TermService.html":{}},"body":{"controllers/TermController.html":{},"modules/TermModule.html":{},"injectables/TermService.html":{},"coverage.html":{},"overview.html":{}}}],["test",{"_index":823,"title":{},"body":{"index.html":{}}}],["test:covresources",{"_index":826,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":825,"title":{},"body":{"index.html":{}}}],["tests",{"_index":821,"title":{},"body":{"index.html":{}}}],["text",{"_index":289,"title":{},"body":{"injectables/AuthService.html":{}}}],["thanks",{"_index":877,"title":{},"body":{"index.html":{}}}],["this.appservice.gethello",{"_index":71,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.generateaccesstoken(user.id",{"_index":222,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.login",{"_index":543,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["this.authservice.signup(dto",{"_index":215,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signupmail(user.email",{"_index":216,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.carservice.create(dto",{"_index":366,"title":{},"body":{"controllers/CarController.html":{}}}],["this.carservice.delete(id",{"_index":371,"title":{},"body":{"controllers/CarController.html":{}}}],["this.carservice.getall",{"_index":361,"title":{},"body":{"controllers/CarController.html":{}}}],["this.carservice.getcarbyid(id",{"_index":363,"title":{},"body":{"controllers/CarController.html":{}}}],["this.carservice.update(id",{"_index":369,"title":{},"body":{"controllers/CarController.html":{}}}],["this.configservice.get('access_token_secret",{"_index":294,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('access_token_time",{"_index":296,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.sign(payload",{"_index":292,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.mail",{"_index":563,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mail.sendmail(options",{"_index":568,"title":{},"body":{"injectables/MailService.html":{}}}],["this.mailservice.sendmail",{"_index":287,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.password",{"_index":694,"title":{},"body":{"entities/User.html":{}}}],["this.profileimg",{"_index":696,"title":{},"body":{"entities/User.html":{}}}],["this.provider",{"_index":691,"title":{},"body":{"entities/User.html":{}}}],["this.repository.create",{"_index":645,"title":{},"body":{"injectables/TermService.html":{}}}],["this.repository.create(dto",{"_index":394,"title":{},"body":{"injectables/CarService.html":{},"injectables/UserService.html":{}}}],["this.repository.delete(id",{"_index":397,"title":{},"body":{"injectables/CarService.html":{}}}],["this.repository.find",{"_index":392,"title":{},"body":{"injectables/CarService.html":{}}}],["this.repository.findoneby",{"_index":393,"title":{},"body":{"injectables/CarService.html":{},"injectables/UserService.html":{}}}],["this.repository.save(car",{"_index":395,"title":{},"body":{"injectables/CarService.html":{}}}],["this.repository.save(term",{"_index":646,"title":{},"body":{"injectables/TermService.html":{}}}],["this.repository.save(user",{"_index":725,"title":{},"body":{"injectables/UserService.html":{}}}],["this.repository.update",{"_index":648,"title":{},"body":{"injectables/TermService.html":{}}}],["this.repository.update(id",{"_index":396,"title":{},"body":{"injectables/CarService.html":{}}}],["this.termservice.create(req.user",{"_index":629,"title":{},"body":{"controllers/TermController.html":{}}}],["this.termservice.update(req.user",{"_index":631,"title":{},"body":{"controllers/TermController.html":{}}}],["this.user.create",{"_index":522,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.user.finduserby('email",{"_index":512,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["this.userservice.create",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["this.userservice.finduserby('email",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["this.userservice.finduserby('id",{"_index":58,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["throw",{"_index":284,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CarService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["time",{"_index":854,"title":{},"body":{"index.html":{}}}],["token",{"_index":221,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["tokenpayloadinterface",{"_index":36,"title":{"interfaces/TokenPayloadInterface.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"interfaces/TokenPayloadInterface.html":{},"coverage.html":{}}}],["touch",{"_index":885,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":687,"title":{},"body":{"entities/User.html":{},"dependencies.html":{}}}],["true",{"_index":428,"title":{},"body":{"classes/CreateTermDto.html":{},"modules/DbModule.html":{},"modules/RedisModule.html":{},"entities/User.html":{}}}],["true})@exclude",{"_index":671,"title":{},"body":{"entities/User.html":{}}}],["true})@joincolumn",{"_index":680,"title":{},"body":{"entities/User.html":{}}}],["try",{"_index":511,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["ttl",{"_index":592,"title":{},"body":{"modules/RedisModule.html":{}}}],["twitter",{"_index":891,"title":{},"body":{"index.html":{}}}],["type",{"_index":33,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/Base.html":{},"entities/Car.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"classes/LoginUserDto.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"interfaces/TokenPayloadInterface.html":{},"entities/User.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typeorm",{"_index":313,"title":{},"body":{"classes/Base.html":{},"entities/Car.html":{},"injectables/CarService.html":{},"entities/Term.html":{},"injectables/TermService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":375,"title":{},"body":{"modules/CarModule.html":{},"modules/DbModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([car",{"_index":379,"title":{},"body":{"modules/CarModule.html":{}}}],["typeormmodule.forfeature([term",{"_index":636,"title":{},"body":{"modules/TermModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":715,"title":{},"body":{"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":467,"title":{},"body":{"modules/DbModule.html":{}}}],["types",{"_index":658,"title":{},"body":{"classes/UpdateAuthDto.html":{},"classes/UpdateCarDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["types/bcrypt",{"_index":755,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":757,"title":{},"body":{"dependencies.html":{}}}],["types/gravatar",{"_index":760,"title":{},"body":{"dependencies.html":{}}}],["types/hapi__joi",{"_index":762,"title":{},"body":{"dependencies.html":{}}}],["types/nodemailer",{"_index":764,"title":{},"body":{"dependencies.html":{}}}],["types/passport",{"_index":766,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":807,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":677,"title":{},"body":{"entities/User.html":{}}}],["unique",{"_index":689,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":822,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":40,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CarController.html":{},"injectables/CarService.html":{},"injectables/LocalAuthStrategy.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{},"injectables/UserService.html":{}}}],["unlicensed",{"_index":907,"title":{},"body":{"properties.html":{}}}],["update",{"_index":335,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"controllers/TermController.html":{},"injectables/TermService.html":{}}}],["update(@param('id",{"_index":368,"title":{},"body":{"controllers/CarController.html":{}}}],["update(@req",{"_index":630,"title":{},"body":{"controllers/TermController.html":{}}}],["update(id",{"_index":348,"title":{},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{}}}],["update(req",{"_index":619,"title":{},"body":{"controllers/TermController.html":{}}}],["update(user",{"_index":641,"title":{},"body":{"injectables/TermService.html":{}}}],["updateat",{"_index":302,"title":{},"body":{"classes/Base.html":{}}}],["updateauthdto",{"_index":653,"title":{"classes/UpdateAuthDto.html":{}},"body":{"classes/UpdateAuthDto.html":{},"coverage.html":{}}}],["updatecardto",{"_index":349,"title":{"classes/UpdateCarDto.html":{}},"body":{"controllers/CarController.html":{},"injectables/CarService.html":{},"classes/UpdateCarDto.html":{},"coverage.html":{}}}],["updatedatecolumn",{"_index":310,"title":{},"body":{"classes/Base.html":{}}}],["updates",{"_index":864,"title":{},"body":{"index.html":{}}}],["updatetermdto",{"_index":620,"title":{"classes/UpdateTermDto.html":{}},"body":{"controllers/TermController.html":{},"injectables/TermService.html":{},"classes/UpdateTermDto.html":{},"coverage.html":{}}}],["updateuserdto",{"_index":664,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["usefactory",{"_index":469,"title":{},"body":{"modules/DbModule.html":{},"modules/RedisModule.html":{}}}],["useguards",{"_index":186,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["useguards(accesstokenguard",{"_index":223,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TermController.html":{}}}],["useguards(googleauthguard",{"_index":226,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(kakaoauthguard",{"_index":231,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":218,"title":{},"body":{"controllers/AuthController.html":{}}}],["useguards(naverauthguard",{"_index":235,"title":{},"body":{"controllers/AuthController.html":{}}}],["user",{"_index":213,"title":{"entities/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/MailService.html":{},"injectables/NaverAuthStrategy.html":{},"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"injectables/TermService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.dto",{"_index":194,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UpdateUserDto.html":{},"injectables/UserService.html":{}}}],["user.dto.ts",{"_index":437,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:10",{"_index":547,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.dto.ts:18",{"_index":457,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:23",{"_index":448,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":445,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:31",{"_index":451,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:34",{"_index":453,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:37",{"_index":452,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:40",{"_index":455,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:7",{"_index":546,"title":{},"body":{"classes/LoginUserDto.html":{}}}],["user.password",{"_index":283,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.provider",{"_index":513,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["user.term",{"_index":608,"title":{},"body":{"entities/Term.html":{}}}],["user.term.id",{"_index":649,"title":{},"body":{"injectables/TermService.html":{}}}],["user/dto/create",{"_index":193,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user/dto/login",{"_index":200,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/entities/provider.enum",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/GoogleAuthGuard.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthGuard.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthGuard.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["user/entities/user.entity",{"_index":598,"title":{},"body":{"interfaces/RequestUserInterface.html":{},"entities/Term.html":{},"injectables/TermService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["user/user.controller",{"_index":714,"title":{},"body":{"modules/UserModule.html":{}}}],["user/user.module",{"_index":102,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":47,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["usercontroller",{"_index":707,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/TokenPayloadInterface.html":{}}}],["usermodule",{"_index":90,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":442,"title":{},"body":{"classes/CreateUserDto.html":{},"modules/DbModule.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"entities/User.html":{}}}],["usernamefield",{"_index":542,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["userservice",{"_index":28,"title":{"injectables/UserService.html":{}},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/AuthService.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["using",{"_index":855,"title":{},"body":{"index.html":{}}}],["validate",{"_index":24,"title":{},"body":{"injectables/AccessTokenStrategy.html":{},"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/LocalAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(accesstoken",{"_index":493,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{},"injectables/KakaoAuthStrategy.html":{},"injectables/NaverAuthStrategy.html":{}}}],["validate(email",{"_index":539,"title":{},"body":{"injectables/LocalAuthStrategy.html":{}}}],["validate(payload",{"_index":35,"title":{},"body":{"injectables/AccessTokenStrategy.html":{}}}],["validationschema",{"_index":108,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":414,"title":{},"body":{"classes/CreateCarDto.html":{},"classes/CreateTermDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":721,"title":{},"body":{"injectables/UserService.html":{},"miscellaneous/enumerations.html":{}}}],["verifycallback",{"_index":497,"title":{},"body":{"injectables/GoogleAuthStrategy.html":{}}}],["version",{"_index":905,"title":{},"body":{"properties.html":{}}}],["video",{"_index":847,"title":{},"body":{"index.html":{}}}],["visit",{"_index":834,"title":{},"body":{"index.html":{}}}],["visualize",{"_index":849,"title":{},"body":{"index.html":{}}}],["watch",{"_index":816,"title":{},"body":{"index.html":{}}}],["website",{"_index":889,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":136,"title":{},"body":{"injectables/AppService.html":{}}}],["working",{"_index":832,"title":{},"body":{"index.html":{}}}],["x",{"_index":866,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":881,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":91,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CarModule.html":{},"modules/MailModule.html":{},"modules/TermModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/AccessTokenGuard.html":{"url":"injectables/AccessTokenGuard.html","title":"injectable - AccessTokenGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/accessToken.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard('jwt')\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class AccessTokenGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AccessTokenStrategy.html":{"url":"injectables/AccessTokenStrategy.html","title":"injectable - AccessTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AccessTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/accessToken.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PassportStrategy(Strategy)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/accessToken.strategy.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(payload: TokenPayloadInterface)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/accessToken.strategy.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            TokenPayloadInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\nimport { TokenPayloadInterface } from '@auth/interface/tokenPayload.interface';\n\n@Injectable()\nexport class AccessTokenStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: configService.get('ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  // id 값을 찾는 검증 함수\n  async validate(payload: TokenPayloadInterface) {\n    return this.userService.findUserBy('id', payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getHello\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n                    \n                        \n                            Defined in src/app.controller.ts:9\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from '@root/app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCarModule\n\nCarModule\n\nAppModule -->\n\nCarModule->AppModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nTermModule\n\nTermModule\n\nAppModule -->\n\nTermModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CarModule\n                        \n                        \n                            DbModule\n                        \n                        \n                            MailModule\n                        \n                        \n                            RedisModule\n                        \n                        \n                            TermModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { AppController } from '@root/app.controller';\nimport { AppService } from '@root/app.service';\nimport { DbModule } from '@db/db.module';\nimport { CarModule } from '@car/car.module';\nimport { UserModule } from '@user/user.module';\nimport { AuthModule } from '@auth/auth.module';\nimport { MailModule } from '@mail/mail.module';\nimport { RedisModule } from './redis/redis.module';\nimport { TermModule } from './term/term.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        POSTGRES_HOST: Joi.string().required(),\n        POSTGRES_USER: Joi.string().required(),\n        POSTGRES_PASSWORD: Joi.string().required(),\n        POSTGRES_DB: Joi.string().required(),\n        POSTGRES_PORT: Joi.number().required(),\n        MAIL_SERVICE: Joi.string().required(),\n        MAIL_USER: Joi.string().required(),\n        MAIL_PASSWORD: Joi.string().required(),\n        ACCESS_TOKEN_SECRET: Joi.string().required(),\n        ACCESS_TOKEN_TIME: Joi.string().required(),\n        REDIS_HOST: Joi.string().required(),\n        REDIS_PASSWORD: Joi.string().required(),\n        REDIS_PORT: Joi.number().required(),\n        REDIS_TTL: Joi.number().required(),\n        GOOGLE_CLIENT_ID: Joi.string().required(),\n        GOOGLE_CLIENT_SECRET: Joi.string().required(),\n        GOOGLE_CALLBACK_URL: Joi.string().required(),\n        KAKAO_CLIENT_ID: Joi.string().required(),\n        KAKAO_CALLBACK_URL: Joi.string().required(),\n        NAVER_CLIENT_ID: Joi.string().required(),\n        NAVER_CLIENT_SECRET: Joi.string().required(),\n        NAVER_CALLBACK_URL: Joi.string().required(),\n      }),\n    }),\n    DbModule,\n    CarModule,\n    UserModule,\n    AuthModule,\n    MailModule,\n    RedisModule,\n    TermModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app.service.ts:5\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         string\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Welcome Jang Car';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Auth.html":{"url":"classes/Auth.html","title":"class - Auth","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Auth\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/entities/auth.entity.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class Auth {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                authenticate\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                googleLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                kakaoLogin\n                            \n                            \n                                    \n                                    \n                                    \n                                    Async\n                                login\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverCallback\n                            \n                            \n                                    \n                                    \n                                    Async\n                                naverLogin\n                            \n                            \n                                    \n                                    \n                                    Async\n                                signup\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        authenticate\n                        \n                    \n                \n            \n            \n                \n                        \n                    authenticate(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(AccessTokenGuard)@ApiBearerAuth()\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:52\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google/callback')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:66\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        googleLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    googleLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/google')@UseGuards(GoogleAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:59\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao/callback')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        kakaoLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    kakaoLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/kakao')@UseGuards(KakaoAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:76\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@UseGuards(LocalAuthGuard)@ApiBody({type: LoginUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverCallback\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverCallback(req: RequestUserInterface)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver/callback')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:100\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        naverLogin\n                        \n                    \n                \n            \n            \n                \n                        \n                    naverLogin()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/naver')@UseGuards(NaverAuthGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:93\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')@ApiBody({type: CreateUserDto})\n                \n            \n\n                    \n                        \n                            Defined in src/auth/auth.controller.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  HttpStatus,\n  Post,\n  Req,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiBearerAuth, ApiBody, ApiTags } from '@nestjs/swagger';\nimport { AuthService } from '@auth/auth.service';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { LocalAuthGuard } from '@auth/guard/local-auth.guard';\nimport { RequestUserInterface } from '@auth/interface/requestUser.interface';\nimport { AccessTokenGuard } from '@auth/guard/accessToken.guard';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { GoogleAuthGuard } from '@auth/guard/google-auth.guard';\nimport { KakaoAuthGuard } from '@auth/guard/kakao-auth.guard';\nimport { NaverAuthGuard } from '@auth/guard/naver-auth.guard';\n\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private readonly authService: AuthService) {}\n\n  // 회원가입 API\n  @Post('/signup')\n  @ApiBody({ type: CreateUserDto })\n  async signup(@Body() dto: CreateUserDto) {\n    const user = await this.authService.signup(dto);\n    await this.authService.signupMail(user.email);\n\n    return user;\n  }\n\n  // 로그인 API\n  @Post('/login')\n  @UseGuards(LocalAuthGuard)\n  @ApiBody({ type: LoginUserDto })\n  async login(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    // 로그인 시 토큰 발행\n    const token = this.authService.generateAccessToken(user.id);\n\n    return { user, token };\n  }\n\n  // 로그인 이후, 토큰으로 유저 정보 찾는 API\n  @Get()\n  @UseGuards(AccessTokenGuard)\n  @ApiBearerAuth()\n  async authenticate(@Req() req: RequestUserInterface) {\n    return req.user;\n  }\n\n  // 구글 로그인 API\n  @Get('/google')\n  @UseGuards(GoogleAuthGuard)\n  async googleLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 구글 로그인 콜백 API\n  @Get('/google/callback')\n  @UseGuards(GoogleAuthGuard)\n  async googleCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateAccessToken(user.id);\n\n    return { user, token };\n  }\n\n  // 카카오 로그인 API\n  @Get('/kakao')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 카카오 로그인 콜백 API\n  @Get('/kakao/callback')\n  @UseGuards(KakaoAuthGuard)\n  async kakaoCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateAccessToken(user.id);\n\n    return { user, token };\n  }\n\n  // 네이버 로그인 API\n  @Get('/naver')\n  @UseGuards(NaverAuthGuard)\n  async naverLogin() {\n    return HttpStatus.OK;\n  }\n\n  // 네이버 로그인 콜백 API\n  @Get('/naver/callback')\n  @UseGuards(NaverAuthGuard)\n  async naverCallback(@Req() req: RequestUserInterface) {\n    const user = req.user;\n    const token = this.authService.generateAccessToken(user.id);\n\n    return { user, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nMailModule\n\nMailModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccessTokenStrategy\n                        \n                        \n                            AuthService\n                        \n                        \n                            GoogleAuthStrategy\n                        \n                        \n                            KakaoAuthStrategy\n                        \n                        \n                            LocalAuthStrategy\n                        \n                        \n                            NaverAuthStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MailModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { JwtModule } from '@nestjs/jwt';\nimport { UserModule } from '@user/user.module';\nimport { AuthController } from '@auth/auth.controller';\nimport { AuthService } from '@auth/auth.service';\nimport { LocalAuthStrategy } from '@auth/strategy/local-auth.strategy';\nimport { AccessTokenStrategy } from '@auth/strategy/accessToken.strategy';\nimport { MailModule } from '@mail/mail.module';\nimport { GoogleAuthStrategy } from '@auth/strategy/google-auth.strategy';\nimport { KakaoAuthStrategy } from '@auth/strategy/kakao-auth.strategy';\nimport { NaverAuthStrategy } from '@auth/strategy/naver-auth.strategy';\n\n@Module({\n  imports: [ConfigModule, UserModule, MailModule, JwtModule.register({})],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    LocalAuthStrategy,\n    AccessTokenStrategy,\n    GoogleAuthStrategy,\n    KakaoAuthStrategy,\n    NaverAuthStrategy,\n  ],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                generateAccessToken\n                            \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                signup\n                            \n                            \n                                    Async\n                                signupMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService, mailService: MailService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mailService\n                                                  \n                                                        \n                                                                        MailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        generateAccessToken\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateAccessToken(userId: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:55\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                        \n                    login(dto: LoginUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:27\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            LoginUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signup\n                        \n                    \n                \n            \n            \n                \n                        \n                    signup(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:22\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        signupMail\n                        \n                    \n                \n            \n            \n                \n                        \n                    signupMail(email: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/auth.service.ts:45\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { ConfigService } from '@nestjs/config';\nimport { JwtService } from '@nestjs/jwt';\nimport { UserService } from '@user/user.service';\nimport { MailService } from '@mail/mail.service';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\nimport { LoginUserDto } from '@user/dto/login-user.dto';\nimport { TokenPayloadInterface } from '@auth/interface/tokenPayload.interface';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n    private readonly mailService: MailService,\n    private readonly jwtService: JwtService,\n  ) {}\n\n  // 회원가입 로직\n  async signup(dto: CreateUserDto) {\n    return await this.userService.create({ ...dto, provider: Provider.LOCAL });\n  }\n\n  // 로그인 로직\n  async login(dto: LoginUserDto) {\n    // 메일 체크\n    const user = await this.userService.findUserBy('email', dto.email);\n\n    // 암호화 된 비밀번호 체크\n    const match = await bcrypt.compare(dto.password, user.password);\n\n    if (!match) {\n      throw new HttpException(\n        '비밀번호가 일치하지 않습니다.',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    return user;\n  }\n\n  // 회원가입 후 메일 전송\n  async signupMail(email: string) {\n    await this.mailService.sendMail({\n      to: email,\n      subject: '안녕하세요 장카입니다.',\n      text: '장카의 회원이 되어주셔서 감사드립니다.',\n      html: '잘 부탁드립니다.',\n    });\n  }\n\n  // Access Token 발행 로직\n  public generateAccessToken(userId: string) {\n    const payload: TokenPayloadInterface = { userId };\n\n    return this.jwtService.sign(payload, {\n      secret: this.configService.get('ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('ACCESS_TOKEN_TIME'),\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Base.html":{"url":"classes/Base.html","title":"class - Base","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Base\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/entities/base.entity.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                createAt\n                            \n                            \n                                    \n                                    Public\n                                deleteAt\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                updateAt\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        createAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @CreateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/base.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        deleteAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @DeleteDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/base.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/base.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        updateAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @UpdateDateColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/base.entity.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  CreateDateColumn,\n  DeleteDateColumn,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nexport abstract class Base {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @CreateDateColumn()\n  public createAt: Date;\n\n  @UpdateDateColumn()\n  public updateAt: Date;\n\n  @DeleteDateColumn()\n  public deleteAt: Date;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Car.html":{"url":"entities/Car.html","title":"entity - Car","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Car\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/entities/car.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                carImg\n                            \n                            \n                                    \n                                    Public\n                                carName\n                            \n                            \n                                    \n                                    Public\n                                category\n                            \n                            \n                                    \n                                    Public\n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        carImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/car.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        carName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/car.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/car.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/entities/car.entity.ts:10\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity } from 'typeorm';\nimport { Base } from '@car/entities/base.entity';\n\n@Entity()\nexport class Car extends Base {\n  @Column()\n  public carName: string;\n\n  @Column()\n  public price: number;\n\n  @Column()\n  public category: string;\n\n  @Column()\n  public carImg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CarController.html":{"url":"controllers/CarController.html","title":"controller - CarController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CarController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/car.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                car\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    Async\n                                delete\n                            \n                            \n                                    \n                                    Async\n                                getAll\n                            \n                            \n                                    \n                                    Async\n                                getCarById\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/create')@ApiBody({type: CreateCarDto})\n                \n            \n\n                    \n                        \n                            Defined in src/car/car.controller.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCarDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/car/car.controller.ts:48\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/all')\n                \n            \n\n                    \n                        \n                            Defined in src/car/car.controller.ts:22\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        getCarById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCarById(id: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n                    \n                        \n                            Defined in src/car/car.controller.ts:28\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateCarDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put('/:id')@ApiBody({type: CreateCarDto})\n                \n            \n\n                    \n                        \n                            Defined in src/car/car.controller.ts:42\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateCarDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Post,\n  Put,\n} from '@nestjs/common';\nimport { ApiBody, ApiTags } from '@nestjs/swagger';\nimport { CarService } from '@car/car.service';\nimport { CreateCarDto } from '@car/dto/create-car.dto';\nimport { UpdateCarDto } from '@car/dto/update-car.dto';\n\n@ApiTags('car')\n@Controller('car')\nexport class CarController {\n  constructor(private readonly carService: CarService) {}\n\n  // 전체 찾기 API\n  @Get('/all')\n  async getAll() {\n    return await this.carService.getAll();\n  }\n\n  // 상세 찾기 API\n  @Get('/:id')\n  async getCarById(@Param('id') id: string) {\n    return await this.carService.getCarById(id);\n  }\n\n  // 등록 API\n  @Post('/create')\n  @ApiBody({ type: CreateCarDto })\n  async create(@Body() dto: CreateCarDto) {\n    return await this.carService.create(dto);\n  }\n\n  // 수정 API\n  @Put('/:id')\n  @ApiBody({ type: CreateCarDto })\n  async update(@Param('id') id: string, @Body() dto: UpdateCarDto) {\n    return await this.carService.update(id, dto);\n  }\n\n  // 삭제 API\n  @Delete('/:id')\n  async delete(@Param('id') id: string) {\n    return await this.carService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CarModule.html":{"url":"modules/CarModule.html","title":"module - CarModule","body":"\n                   \n\n\n\n\n    Modules\n    CarModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CarModule\n\n\n\ncluster_CarModule_providers\n\n\n\n\nCarService\n\nCarService\n\n\n\nCarModule\n\nCarModule\n\nCarModule -->\n\nCarService->CarModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/car/car.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CarService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CarController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { CarController } from '@car/car.controller';\nimport { CarService } from '@car/car.service';\nimport { Car } from '@car/entities/car.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Car])],\n  controllers: [CarController],\n  providers: [CarService],\n})\nexport class CarModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CarService.html":{"url":"injectables/CarService.html","title":"injectable - CarService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CarService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/car.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                delete\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getCarById\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/car/car.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateCarDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/car/car.service.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateCarDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/car/car.service.ts:51\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAll()\n                \n            \n\n\n                    \n                        \n                            Defined in src/car/car.service.ts:16\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     unknown\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getCarById\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCarById(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/car/car.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(id: string, dto: UpdateCarDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/car/car.service.ts:40\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateCarDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { Car } from '@car/entities/car.entity';\nimport { CreateCarDto } from '@car/dto/create-car.dto';\nimport { UpdateCarDto } from '@car/dto/update-car.dto';\n\n@Injectable()\nexport class CarService {\n  constructor(\n    @InjectRepository(Car)\n    private repository: Repository,\n  ) {}\n\n  // 전체 찾기 로직\n  async getAll() {\n    return await this.repository.find();\n  }\n\n  // 상세 찾기 로직\n  async getCarById(id: string) {\n    const car = await this.repository.findOneBy({ id });\n\n    if (!car) {\n      throw new NotFoundException('해당 차를 찾을 수 없습니다.');\n    }\n\n    return car;\n  }\n\n  // 등록 로직\n  async create(dto: CreateCarDto) {\n    const car = await this.repository.create(dto);\n    await this.repository.save(car);\n\n    return car;\n  }\n\n  // 수정 로직\n  async update(id: string, dto: UpdateCarDto) {\n    const car = await this.repository.update(id, dto);\n\n    if (!car) {\n      throw new NotFoundException('해당 차를 찾을 수 없습니다.');\n    }\n\n    return car;\n  }\n\n  // 삭제 로직\n  async delete(id: string) {\n    const car = await this.repository.delete(id);\n\n    if (!car) {\n      throw new NotFoundException('해당 차를 찾을 수 없습니다.');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAuthDto.html":{"url":"classes/CreateAuthDto.html","title":"class - CreateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/create-auth.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateAuthDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCarDto.html":{"url":"classes/CreateCarDto.html","title":"class - CreateCarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/dto/create-car.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                carImg\n                            \n                            \n                                    \n                                    \n                                carName\n                            \n                            \n                                    \n                                    \n                                category\n                            \n                            \n                                    \n                                    \n                                price\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        carImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/dto/create-car.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        carName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'K7'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/dto/create-car.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        category\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '하이브리드'})@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/dto/create-car.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        price\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 100})@IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/car/dto/create-car.dto.ts:11\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNumber, IsString } from 'class-validator';\n\nexport class CreateCarDto {\n  @ApiProperty({ example: 'K7' })\n  @IsString()\n  carName: string;\n\n  @ApiProperty({ example: 100 })\n  @IsNumber()\n  price: number;\n\n  @ApiProperty({ example: '하이브리드' })\n  @IsString()\n  category: string;\n\n  @ApiProperty()\n  @IsString()\n  carImg: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTermDto.html":{"url":"classes/CreateTermDto.html","title":"class - CreateTermDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTermDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/term/dto/create-term.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                agreeFourteen\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                agreeOfEvent\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                agreeOfLocation\n                            \n                            \n                                    \n                                    \n                                agreeOfService\n                            \n                            \n                                    \n                                    \n                                agreeOfTerm\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        agreeFourteen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({example: 'true'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/dto/create-term.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        agreeOfEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({example: 'false'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/dto/create-term.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        agreeOfLocation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({example: 'false'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/dto/create-term.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        agreeOfService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({example: 'true'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/dto/create-term.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        agreeOfTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsBoolean()@ApiProperty({example: 'true'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/dto/create-term.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsBoolean } from 'class-validator';\nimport { ApiProperty } from '@nestjs/swagger';\n\nexport class CreateTermDto {\n  @IsBoolean()\n  @ApiProperty({ example: 'true' })\n  agreeOfTerm: boolean;\n\n  @IsBoolean()\n  @ApiProperty({ example: 'true' })\n  agreeFourteen: boolean;\n\n  @IsBoolean()\n  @ApiProperty({ example: 'true' })\n  agreeOfService: boolean;\n\n  @IsBoolean()\n  @ApiProperty({ example: 'false' })\n  agreeOfEvent?: boolean;\n\n  @IsBoolean()\n  @ApiProperty({ example: 'false' })\n  agreeOfLocation?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                    \n                                    \n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    \n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Optional\n                                provider\n                            \n                            \n                                    \n                                    Optional\n                                term\n                            \n                            \n                                    \n                                    \n                                    \n                                    \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()@ApiProperty({example: 'email@exam.com'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@MinLength(7)@ApiProperty({example: '123456a!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()@ApiProperty({example: 1012345678})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Term\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({type: CreateTermDto})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            \n                            \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(2)@ApiProperty({example: '홍길동'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/create-user.dto.ts:18\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MinLength,\n} from 'class-validator';\nimport { Provider } from '@user/entities/provider.enum';\nimport { Term } from '@root/term/entities/term.entity';\nimport { CreateTermDto } from '@root/term/dto/create-term.dto';\n\nexport class CreateUserDto {\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(2)\n  @ApiProperty({ example: '홍길동' })\n  userName: string;\n\n  @IsString()\n  @MinLength(7)\n  @ApiProperty({ example: '123456a!' })\n  password?: string;\n\n  @IsEmail()\n  @ApiProperty({ example: 'email@exam.com' })\n  email: string;\n\n  @IsNumber()\n  @ApiProperty({ example: 1012345678 })\n  phone?: number;\n\n  @IsString()\n  provider?: Provider;\n\n  @IsString()\n  profileImg?: string;\n\n  @ApiProperty({ type: CreateTermDto })\n  term?: Term;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/DbModule.html":{"url":"modules/DbModule.html","title":"module - DbModule","body":"\n                   \n\n\n\n\n    Modules\n    DbModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/db/db.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (service: ConfigService) => ({\n        type: 'postgres',\n        host: service.get('POSTGRES_HOST'),\n        port: service.get('POSTGRES_PORT'),\n        username: service.get('POSTGRES_USER'),\n        password: service.get('POSTGRES_PASSWORD'),\n        database: service.get('POSTGRES_DB'),\n        entities: [__dirname + '/../**/*.entity{.ts,.js}'],\n        autoLoadEntities: true,\n        synchronize: true,\n      }),\n    }),\n  ],\n})\nexport class DbModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthGuard.html":{"url":"injectables/GoogleAuthGuard.html","title":"injectable - GoogleAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/google-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.GOOGLE)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class GoogleAuthGuard extends AuthGuard(Provider.GOOGLE) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GoogleAuthStrategy.html":{"url":"injectables/GoogleAuthStrategy.html","title":"injectable - GoogleAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  GoogleAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/google-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, user: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/google-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: VerifyCallback)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/google-auth.strategy.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                        VerifyCallback\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, VerifyCallback } from 'passport-google-oauth2';\nimport { Provider } from '@user/entities/provider.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class GoogleAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.GOOGLE,\n) {\n  constructor(\n    private readonly config: ConfigService,\n    private readonly user: UserService,\n  ) {\n    super({\n      clientID: config.get('GOOGLE_CLIENT_ID'),\n      clientSecret: config.get('GOOGLE_CLIENT_SECRET'),\n      callbackURL: config.get('GOOGLE_CALLBACK_URL'),\n      scope: ['email', 'profile'],\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: VerifyCallback,\n  ) {\n    const { provider, displayName, email, picture } = profile;\n\n    try {\n      const user = await this.user.findUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider}에 가입되어 있습니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      console.log('+++++++');\n      done(null, user);\n    } catch (e) {\n      if (e.status === 404) {\n        const newUser = await this.user.create({\n          email,\n          profileImg: picture,\n          provider,\n          userName: displayName,\n        });\n\n        console.log('--------');\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthGuard.html":{"url":"injectables/KakaoAuthGuard.html","title":"injectable - KakaoAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/kakao-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.KAKAO)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class KakaoAuthGuard extends AuthGuard(Provider.KAKAO) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/KakaoAuthStrategy.html":{"url":"injectables/KakaoAuthStrategy.html","title":"injectable - KakaoAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  KakaoAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/kakao-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/kakao-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/kakao-auth.strategy.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-kakao';\nimport { Provider } from '@user/entities/provider.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class KakaoAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.KAKAO,\n) {\n  constructor(\n    private readonly config: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: config.get('KAKAO_CLIENT_ID'),\n      callbackURL: config.get('KAKAO_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, username } = profile;\n    const { profile_image } = profile._json.properties;\n    const { email } = profile._json.kakao_account;\n\n    try {\n      const user = await this.userService.findUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider}에 등록되어 있습니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      console.log('=========');\n      done(null, user);\n    } catch (e) {\n      if (e.status === 404) {\n        const newUser = await this.userService.create({\n          userName: username,\n          provider,\n          email,\n          profileImg: profile_image,\n        });\n\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/local-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.LOCAL)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard(Provider.LOCAL) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthStrategy.html":{"url":"injectables/LocalAuthStrategy.html","title":"injectable - LocalAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/local-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.LOCAL,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/local-auth.strategy.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(email: string, password: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/local-auth.strategy.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                email\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                password\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-local';\nimport { AuthService } from '@auth/auth.service';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class LocalAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.LOCAL,\n) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  // 로그인 관련 검증 함수\n  async validate(email: string, password: string) {\n    return await this.authService.login({ email, password });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                email\n                            \n                            \n                                    \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: 'email@exam.com'})@IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({example: '123456a!'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/login-user.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEmail } from 'class-validator';\n\nexport class LoginUserDto {\n  @ApiProperty({ example: 'email@exam.com' })\n  @IsEmail()\n  email: string;\n\n  @ApiProperty({ example: '123456a!' })\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MailModule.html":{"url":"modules/MailModule.html","title":"module - MailModule","body":"\n                   \n\n\n\n\n    Modules\n    MailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MailModule\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_MailModule_exports\n\n\n\n\nMailService \n\nMailService \n\n\n\nMailModule\n\nMailModule\n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/mail/mail.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MailService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { MailService } from '@mail/mail.service';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [MailService],\n  exports: [MailService],\n})\nexport class MailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MailService.html":{"url":"injectables/MailService.html","title":"injectable - MailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/mail/mail.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                mail\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/mail/mail.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n                    \n                        \n                            Defined in src/mail/mail.service.ts:21\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                options\n                                            \n                                                        Mail.Options\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        mail\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/mail/mail.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\nimport { createTransport } from 'nodemailer';\n\n@Injectable()\nexport class MailService {\n  private mail: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.mail = createTransport({\n      service: configService.get('MAIL_SERVICE'),\n      auth: {\n        user: configService.get('MAIL_USER'),\n        pass: configService.get('MAIL_PASSWORD'),\n      },\n    });\n  }\n\n  // 메일 보내는 로직\n  sendMail(options: Mail.Options) {\n    return this.mail.sendMail(options);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthGuard.html":{"url":"injectables/NaverAuthGuard.html","title":"injectable - NaverAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guard/naver-auth.guard.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            AuthGuard(Provider.NAVER)\n            \n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\nimport { Provider } from '@user/entities/provider.enum';\n\n@Injectable()\nexport class NaverAuthGuard extends AuthGuard(Provider.NAVER) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/NaverAuthStrategy.html":{"url":"injectables/NaverAuthStrategy.html","title":"injectable - NaverAuthStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  NaverAuthStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategy/naver-auth.strategy.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n)\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategy/naver-auth.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                        \n                    validate(accessToken: string, refreshToken: string, profile: any, done: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/auth/strategy/naver-auth.strategy.ts:24\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                accessToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                refreshToken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                profile\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                done\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy } from 'passport-naver';\nimport { Provider } from '@user/entities/provider.enum';\nimport { ConfigService } from '@nestjs/config';\nimport { UserService } from '@user/user.service';\n\n@Injectable()\nexport class NaverAuthStrategy extends PassportStrategy(\n  Strategy,\n  Provider.NAVER,\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UserService,\n  ) {\n    super({\n      clientID: configService.get('NAVER_CLIENT_ID'),\n      clientSecret: configService.get('NAVER_CLIENT_SECRET'),\n      callbackURL: configService.get('NAVER_CALLBACK_URL'),\n    });\n  }\n\n  async validate(\n    accessToken: string,\n    refreshToken: string,\n    profile: any,\n    done: any,\n  ) {\n    const { provider, displayName } = profile;\n    const { email, profile_image } = profile._json;\n\n    try {\n      const user = await this.userService.findUserBy('email', email);\n\n      if (user.provider !== provider) {\n        throw new HttpException(\n          `이미 ${user.provider}에 연동되어 있습니다.`,\n          HttpStatus.CONFLICT,\n        );\n      }\n\n      console.log('========');\n      done(null, user);\n    } catch (e) {\n      if (e.status === 404) {\n        const newUser = await this.userService.create({\n          userName: displayName,\n          email,\n          profileImg: profile_image,\n          provider,\n        });\n\n        done(null, newUser);\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RedisModule.html":{"url":"modules/RedisModule.html","title":"module - RedisModule","body":"\n                   \n\n\n\n\n    Modules\n    RedisModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/redis/redis.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { CacheModule } from '@nestjs/common/cache';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { redisStore } from 'cache-manager-redis-store';\n\n@Module({\n  imports: [\n    CacheModule.registerAsync({\n      isGlobal: true,\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          store: redisStore,\n          host: configService.get('REDIS_HOST'),\n          password: configService.get('REDIS_PASSWORD'),\n          port: configService.get('REDIS_PORT'),\n          ttl: configService.get('REDIS_TTL'),\n        };\n      },\n    }),\n  ],\n})\nexport class RedisModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestUserInterface.html":{"url":"interfaces/RequestUserInterface.html","title":"interface - RequestUserInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestUserInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/requestUser.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@user/entities/user.entity';\n\nexport interface RequestUserInterface extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Term.html":{"url":"entities/Term.html","title":"entity - Term","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Term\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/term/entities/term.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                agreeFourteen\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                agreeOfEvent\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                agreeOfLocation\n                            \n                            \n                                    \n                                    Public\n                                agreeOfService\n                            \n                            \n                                    \n                                    Public\n                                agreeOfTerm\n                            \n                            \n                                    \n                                    Public\n                                id\n                            \n                            \n                                    \n                                    Public\n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeFourteen\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        agreeOfEvent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        agreeOfLocation\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        agreeOfTerm\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn('uuid')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, user => user.term, {onDelete: 'CASCADE'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/term/entities/term.entity.ts:25\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { Column, Entity, OneToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\n\n@Entity()\nexport class Term {\n  @PrimaryGeneratedColumn('uuid')\n  public id: string;\n\n  @Column({ default: false })\n  public agreeOfTerm: boolean;\n\n  @Column({ default: false })\n  public agreeFourteen: boolean;\n\n  @Column({ default: false })\n  public agreeOfService: boolean;\n\n  @Column({ default: false })\n  public agreeOfEvent?: boolean;\n\n  @Column({ default: false })\n  public agreeOfLocation?: boolean;\n\n  @OneToOne(() => User, (user) => user.term, { onDelete: 'CASCADE' })\n  public user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TermController.html":{"url":"controllers/TermController.html","title":"controller - TermController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TermController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/term/term.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                term\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    \n                                    Async\n                                create\n                            \n                            \n                                    \n                                    \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(req: RequestUserInterface, dto: CreateTermDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/term/term.controller.ts:18\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateTermDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(req: RequestUserInterface, dto: UpdateTermDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@UseGuards(AccessTokenGuard)\n                \n            \n\n                    \n                        \n                            Defined in src/term/term.controller.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                req\n                                            \n                                                            RequestUserInterface\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateTermDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Put, Req, UseGuards } from '@nestjs/common';\nimport { TermService } from './term.service';\nimport { ApiBearerAuth, ApiTags } from '@nestjs/swagger';\nimport { AccessTokenGuard } from '@auth/guard/accessToken.guard';\nimport { RequestUserInterface } from '@auth/interface/requestUser.interface';\nimport { CreateTermDto } from '@root/term/dto/create-term.dto';\nimport { UpdateTermDto } from '@root/term/dto/update-term.dto';\n\n@ApiTags('Term')\n@ApiBearerAuth()\n@Controller('term')\nexport class TermController {\n  constructor(private readonly termService: TermService) {}\n\n  // 생성 API\n  @Post()\n  @UseGuards(AccessTokenGuard)\n  async create(@Req() req: RequestUserInterface, @Body() dto: CreateTermDto) {\n    return await this.termService.create(req.user, dto);\n  }\n\n  // 수정 API\n  @Put()\n  @UseGuards(AccessTokenGuard)\n  async update(@Req() req: RequestUserInterface, @Body() dto: UpdateTermDto) {\n    return await this.termService.update(req.user, dto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TermModule.html":{"url":"modules/TermModule.html","title":"module - TermModule","body":"\n                   \n\n\n\n\n    Modules\n    TermModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TermModule\n\n\n\ncluster_TermModule_providers\n\n\n\n\nTermService\n\nTermService\n\n\n\nTermModule\n\nTermModule\n\nTermModule -->\n\nTermService->TermModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/term/term.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TermService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TermController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TermService } from './term.service';\nimport { TermController } from './term.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Term } from '@root/term/entities/term.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Term])],\n  controllers: [TermController],\n  providers: [TermService],\n})\nexport class TermModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TermService.html":{"url":"injectables/TermService.html","title":"injectable - TermService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TermService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/term/term.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/term/term.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(user: User, dto: CreateTermDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/term/term.service.ts:17\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            CreateTermDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                        \n                    update(user: User, dto: UpdateTermDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/term/term.service.ts:25\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            User\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                dto\n                                            \n                                                            UpdateTermDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Term } from '@root/term/entities/term.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\nimport { CreateTermDto } from '@root/term/dto/create-term.dto';\nimport { UpdateTermDto } from '@root/term/dto/update-term.dto';\n\n@Injectable()\nexport class TermService {\n  constructor(\n    @InjectRepository(Term)\n    private readonly repository: Repository,\n  ) {}\n\n  // 생성 로직\n  async create(user: User, dto: CreateTermDto) {\n    const term = this.repository.create({ user, ...dto });\n    await this.repository.save(term);\n\n    return term;\n  }\n\n  // 수정 로직\n  async update(user: User, dto: UpdateTermDto) {\n    const result = await this.repository.update({ id: user.term.id }, dto);\n\n    if (!result.affected) {\n      throw new BadRequestException('error');\n    }\n\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayloadInterface.html":{"url":"interfaces/TokenPayloadInterface.html","title":"interface - TokenPayloadInterface","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayloadInterface\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interface/tokenPayload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayloadInterface {\n  userId: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAuthDto.html":{"url":"classes/UpdateAuthDto.html","title":"class - UpdateAuthDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAuthDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/update-auth.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        PartialType(CreateAuthDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateAuthDto } from './create-auth.dto';\n\nexport class UpdateAuthDto extends PartialType(CreateAuthDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCarDto.html":{"url":"classes/UpdateCarDto.html","title":"class - UpdateCarDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCarDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/car/dto/update-car.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateCarDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateCarDto } from './create-car.dto';\n\nexport class UpdateCarDto extends PartialType(CreateCarDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTermDto.html":{"url":"classes/UpdateTermDto.html","title":"class - UpdateTermDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTermDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/term/dto/update-term.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateTermDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTermDto } from './create-term.dto';\n\nexport class UpdateTermDto extends PartialType(CreateTermDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/update-user.dto.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            PartialType(CreateUserDto)\n            \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Public\n                                email\n                            \n                            \n                                    \n                                    \n                                    Public\n                                    Optional\n                                password\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                phone\n                            \n                            \n                                    \n                                    Public\n                                    Optional\n                                profileImg\n                            \n                            \n                                    \n                                    Public\n                                provider\n                            \n                            \n                                    \n                                    \n                                    Public\n                                term\n                            \n                            \n                                    \n                                    Public\n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                            Optional\n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})@Exclude()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        phone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                            Optional\n                        profileImg\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        provider\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'enum', enum: Provider, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            \n                            Public\n                        term\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Term\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToOne(undefined, {cascade: true, eager: true})@JoinColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:36\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:12\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import { BeforeInsert, Column, Entity, JoinColumn, OneToOne } from 'typeorm';\nimport * as bcrypt from 'bcrypt';\nimport * as gravatar from 'gravatar';\nimport { Exclude } from 'class-transformer';\nimport { Base } from '@car/entities/base.entity';\nimport { Provider } from '@user/entities/provider.enum';\nimport { Term } from '@root/term/entities/term.entity';\n\n@Entity()\nexport class User extends Base {\n  @Column()\n  public userName: string;\n\n  @Column({ nullable: true })\n  @Exclude()\n  public password?: string;\n\n  @Column({ unique: true })\n  public email: string;\n\n  @Column({ nullable: true })\n  public phone?: number;\n\n  @Column({ nullable: true })\n  public profileImg?: string;\n\n  @Column({\n    type: 'enum',\n    enum: Provider,\n    default: Provider.LOCAL,\n  })\n  public provider: Provider;\n\n  @OneToOne(() => Term, { cascade: true, eager: true })\n  @JoinColumn()\n  public term: Term;\n\n  @BeforeInsert()\n  async beforeSave() {\n    try {\n      if (this.provider !== Provider.LOCAL) {\n        // 소셜 로그인 시, 반환\n        return;\n      } else {\n        // 비밀번호 암호화\n        const saltValue = await bcrypt.genSalt(10);\n        this.password = await bcrypt.hash(this.password, saltValue);\n\n        // 프로필 자동생성\n        this.profileImg = gravatar.url(this.email, {\n          s: '200',\n          r: 'pg',\n          d: 'mm',\n          protocol: 'https',\n        });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from '@nestjs/common';\nimport { UserService } from '@user/user.service';\n\n@Controller('user')\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_exports\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserService } from '@user/user.service';\nimport { UserController } from '@user/user.controller';\nimport { User } from '@user/entities/user.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findUserBy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(dto: CreateUserDto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:15\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                dto\n                                            \n                                                            CreateUserDto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        findUserBy\n                        \n                    \n                \n            \n            \n                \n                        \n                    findUserBy(key: \"id\" | \"email\", value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/user/user.service.ts:23\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                key\n                                            \n                                                        \"id\" | \"email\"\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from '@user/entities/user.entity';\nimport { CreateUserDto } from '@user/dto/create-user.dto';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private repository: Repository,\n  ) {}\n\n  // 유저 등록\n  async create(dto: CreateUserDto) {\n    const user = this.repository.create(dto);\n    await this.repository.save(user);\n\n    return user;\n  }\n\n  // id or email로 유저 정보 찾기\n  async findUserBy(key: 'id' | 'email', value: string) {\n    const user = await this.repository.findOneBy({ [key]: value });\n\n    if (user) {\n      return user;\n    }\n\n    throw new NotFoundException('찾을 수 없는 회원입니다.');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/dto/create-auth.dto.ts\n            \n            class\n            CreateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/dto/update-auth.dto.ts\n            \n            class\n            UpdateAuthDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/entities/auth.entity.ts\n            \n            class\n            Auth\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/accessToken.guard.ts\n            \n            injectable\n            AccessTokenGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/google-auth.guard.ts\n            \n            injectable\n            GoogleAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/kakao-auth.guard.ts\n            \n            injectable\n            KakaoAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guard/naver-auth.guard.ts\n            \n            injectable\n            NaverAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/interface/requestUser.interface.ts\n            \n            interface\n            RequestUserInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/interface/tokenPayload.interface.ts\n            \n            interface\n            TokenPayloadInterface\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/strategy/accessToken.strategy.ts\n            \n            injectable\n            AccessTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/google-auth.strategy.ts\n            \n            injectable\n            GoogleAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/kakao-auth.strategy.ts\n            \n            injectable\n            KakaoAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/local-auth.strategy.ts\n            \n            injectable\n            LocalAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategy/naver-auth.strategy.ts\n            \n            injectable\n            NaverAuthStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/car/car.controller.ts\n            \n            controller\n            CarController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/car/car.service.ts\n            \n            injectable\n            CarService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/car/dto/create-car.dto.ts\n            \n            class\n            CreateCarDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/car/dto/update-car.dto.ts\n            \n            class\n            UpdateCarDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/car/entities/base.entity.ts\n            \n            class\n            Base\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/car/entities/car.entity.ts\n            \n            entity\n            Car\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/mail/mail.service.ts\n            \n            injectable\n            MailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                        src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/term/dto/create-term.dto.ts\n            \n            class\n            CreateTermDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/term/dto/update-term.dto.ts\n            \n            class\n            UpdateTermDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/term/entities/term.entity.ts\n            \n            entity\n            Term\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/term/term.controller.ts\n            \n            controller\n            TermController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/term/term.service.ts\n            \n            injectable\n            TermService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/4)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^10.0.0\n        \n            @nestjs/config : ^3.2.3\n        \n            @nestjs/core : ^10.0.0\n        \n            @nestjs/jwt : ^10.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/passport : ^10.0.3\n        \n            @nestjs/platform-express : ^10.0.0\n        \n            @nestjs/swagger : ^7.4.2\n        \n            @nestjs/typeorm : ^10.0.2\n        \n            @types/bcrypt : ^5.0.2\n        \n            @types/cookie-parser : ^1.4.7\n        \n            @types/gravatar : ^1.8.6\n        \n            @types/hapi__joi : ^17.1.14\n        \n            @types/nodemailer : ^6.4.16\n        \n            @types/passport-jwt : ^4.0.1\n        \n            @types/passport-local : ^1.0.38\n        \n            bcrypt : ^5.1.1\n        \n            cache-manager : ^4.1.0\n        \n            cache-manager-redis-store : ^2.0.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.14.1\n        \n            cookie-parser : ^1.4.7\n        \n            gravatar : ^1.8.2\n        \n            nodemailer : ^6.9.15\n        \n            passport : ^0.7.0\n        \n            passport-google-oauth2 : ^0.2.0\n        \n            passport-jwt : ^4.0.1\n        \n            passport-kakao : ^1.0.1\n        \n            passport-local : ^1.0.0\n        \n            passport-naver : ^1.0.6\n        \n            pg : ^8.13.0\n        \n            reflect-metadata : ^0.2.0\n        \n            rxjs : ^7.8.1\n        \n            typeorm : ^0.3.20\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Provider   (src/.../provider.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/entities/provider.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Provider\n                    \n                \n                        \n                            \n                                 LOCAL\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 GOOGLE\n                            \n                        \n                        \n                            \n                                Value : google\n                            \n                        \n                        \n                            \n                                 KAKAO\n                            \n                        \n                        \n                            \n                                Value : kakao\n                            \n                        \n                        \n                            \n                                 NAVER\n                            \n                        \n                        \n                            \n                                Value : naver\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nProject setup\nExample :$ npm installCompile and run the project\nExample :# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodRun tests\nExample :# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covResources\nCheck out a few resources that may come in handy when working with NestJS:\n\nVisit the NestJS Documentation to learn more about the framework.\nFor questions and support, please visit our Discord channel.\nTo dive deeper and get more hands-on experience, check out our official video courses.\nVisualize your application graph and interact with the NestJS application in real-time using NestJS Devtools.\nNeed help with your project (part-time to full-time)? Check out our official enterprise support.\nTo stay in the loop and get updates, follow us on X and LinkedIn.\nLooking for a job, or have a job to offer? Check out our official Jobs board.\n\nSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CarModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        DbModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RedisModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TermModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CarModule\n\n\n\ncluster_CarModule_providers\n\n\n\ncluster_MailModule\n\n\n\ncluster_MailModule_exports\n\n\n\ncluster_MailModule_providers\n\n\n\ncluster_TermModule\n\n\n\ncluster_TermModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCarModule\n\nCarModule\n\nAppModule -->\n\nCarModule->AppModule\n\n\n\n\n\nDbModule\n\nDbModule\n\nAppModule -->\n\nDbModule->AppModule\n\n\n\n\n\nMailModule\n\nMailModule\n\nAuthModule -->\n\nMailModule->AuthModule\n\n\n\nAppModule -->\n\nMailModule->AppModule\n\n\n\n\n\nMailService \n\nMailService \n\nMailService  -->\n\nMailModule->MailService \n\n\n\n\n\nRedisModule\n\nRedisModule\n\nAppModule -->\n\nRedisModule->AppModule\n\n\n\n\n\nTermModule\n\nTermModule\n\nAppModule -->\n\nTermModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAccessTokenStrategy\n\nAccessTokenStrategy\n\nAuthModule -->\n\nAccessTokenStrategy->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nGoogleAuthStrategy\n\nGoogleAuthStrategy\n\nAuthModule -->\n\nGoogleAuthStrategy->AuthModule\n\n\n\n\n\nKakaoAuthStrategy\n\nKakaoAuthStrategy\n\nAuthModule -->\n\nKakaoAuthStrategy->AuthModule\n\n\n\n\n\nLocalAuthStrategy\n\nLocalAuthStrategy\n\nAuthModule -->\n\nLocalAuthStrategy->AuthModule\n\n\n\n\n\nNaverAuthStrategy\n\nNaverAuthStrategy\n\nAuthModule -->\n\nNaverAuthStrategy->AuthModule\n\n\n\n\n\nCarService\n\nCarService\n\nCarModule -->\n\nCarService->CarModule\n\n\n\n\n\nMailService\n\nMailService\n\nMailModule -->\n\nMailService->MailModule\n\n\n\n\n\nTermService\n\nTermService\n\nTermModule -->\n\nTermService->TermModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        8 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    16 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    11 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
